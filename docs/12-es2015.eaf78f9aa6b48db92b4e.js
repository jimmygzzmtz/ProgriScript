(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{TUkU:function(n,e,i){"use strict";i.r(e),i.d(e,"Tab2PageModule",(function(){return d}));var t=i("TEn/"),a=i("ofXK"),r=i("3Pt+"),o=i("tyNb"),c=i("fXoL");function s(n,e){if(1&n){const n=c.Lb();c.Kb(0,"ion-card",3),c.Sb("click",(function(){c.ac(n);const i=e.$implicit;return c.Ub().cardClick(i)})),c.Kb(1,"ion-card-header"),c.Kb(2,"ion-card-title"),c.fc(3),c.Jb(),c.Jb(),c.Kb(4,"ion-card-content"),c.Kb(5,"p"),c.fc(6),c.Jb(),c.Jb(),c.Jb()}if(2&n){const n=e.$implicit;c.xb(3),c.gc(n.name),c.xb(3),c.gc(n.description)}}const p=[{path:"",component:(()=>{class n{constructor(n){this.router=n,this.codeSnippets=[],this.templateCode=["int test = 1;",'string test = "lol";',"for (int i = 0; i < 10; i++){};"],this.fillSnippets()}cardClick(n){this.router.navigate(["/tabs/tab1"],{state:{template:n.code}})}fillSnippets(){this.codeSnippets=[{name:"Date Types",description:"Use different data types depending on the type of the value.",code:"program snippet;\n      var int a;\n      float b;\n      char c;\n      \n      main ( ){\n        a = 1;\n        b = 2.5;\n        c = 'c';\n      }"},{name:"Read/Write",description:"Read and Write values to communicate with the user.",code:"program snippet;\n      var int a, b;\n      main ( ){\n        read(a);\n        read(b);\n        \n        write(a+b);\n      }"},{name:"If/Else",description:"Use If and Else decisions to control which code executes.",code:'program snippet;\n      var int a;\n      \n      main ( ){\n        a = 1;\n        \n        if(a >= 0){\n          write("positive!");\n        }\n        else{\n          write("negative!");\n        }\n        \n      }'},{name:"For/While Loops",description:"Use For or While loops to execute code until a condition is met.",code:"program snippet;\n      var int a, b;\n      \n      main ( ){\n        for a = 0 to 5{\n          write(a);\n        }\n        \n        b = 5;\n      \n        while(b <= 10){\n          write(b);\n          b = b + 1;\n        }\n        \n      }"},{name:"Functions",description:"Use functions to avoid repeating code.",code:"program snippet;\n      var int a, b;\n      \n      function int sum(int c, int d)\n      {\n        return (c + d);\n      }\n      \n      main ( ){\n        read(a);\n        read(b);\n        write(sum(a, b));\n      }"},{name:"1D Arrays",description:"A way to store more than one value in a data type.",code:"program test;\n      var int a[5];\n      \n      main ( ){\n          a[3] = (9/3);\n          a[2] = (6*3);\n          write(a[3] + a[2]);\n      }"},{name:"2D Arrays",description:"A way to store more than one value per row in a data type.",code:"program test;\n      var int a[5][5];\n      \n      main ( ){\n          a[3][2] = 1;\n          a[2][1] = (6*3);\n          write(a[3][2] + a[2][1] + 1);\n      }"},{name:"Iterative Factorial",description:"An iterative way to obtain the factorial of a number.",code:'program snippet;\n      var int n, fact, i;\n      \n      main ( ){\n        write("Enter a positive integer: ");\n        read(n);\n        fact = 1;\n        i = 1;\n        for i = 1 to (n+1){\n          fact = fact * i;\n        }\n        write(fact);\n      }'},{name:"Iterative Fibonacci",description:"An iterative way to obtain the fibonacci series.",code:'program snippet;\n      var int n;\n      \n      function void fib(int num)\n      var int x, y, z, i;\n      {\n        x = 0;\n        y = 1;\n        z = 0;\n        for i = 0 to num{\n            write(x);\n            z = x + y;\n            x = y;\n            y = z;\n        }\n      }\n      \n      main ( ){\n        write("Enter fibonnaci series");\n        read(n);\n        fib(n);\n      }'},{name:"Recursive Factorial",description:"A recursive way to obtain the factorial of a number.",code:'program snippet;\n      var int n;\n      \n      function int factorial(int f)\n      {\n        if(f > 1){\n            return (f * factorial(f - 1));\n        }\n        else{\n            return (1);\n        }\n      }\n      \n      main ( ){\n        write("Enter a positive integer: ");\n        read(n);\n        write(factorial(n));\n      }'},{name:"Recursive Fibonacci",description:"A recursive way to obtain the fibonacci series.",code:'program snippet;\n      var int a, i;\n      \n      function int fibonacci(int a)\n      {\n        if( (a == 0) || (a == 1) ) {\n            return(a);\n        }\n        else {\n            return (fibonacci(a - 1) + fibonacci(a - 2));\n        }\n      }\n      \n      main ( ){\n        i = 0;\n        write("Number of series : ");\n        read(a);\n        write("Fibonnaci Series : ");\n        while(i < a) {\n            write (fibonacci(i));\n            i = i + 1;\n        }\n      }'}]}}return n.\u0275fac=function(e){return new(e||n)(c.Hb(o.g))},n.\u0275cmp=c.Bb({type:n,selectors:[["app-tab2"]],decls:6,vars:3,consts:[[3,"translucent"],[3,"fullscreen"],["button","true",3,"click",4,"ngFor","ngForOf"],["button","true",3,"click"]],template:function(n,e){1&n&&(c.Kb(0,"ion-header",0),c.Kb(1,"ion-toolbar"),c.Kb(2,"ion-title"),c.fc(3," Snippets "),c.Jb(),c.Jb(),c.Jb(),c.Kb(4,"ion-content",1),c.ec(5,s,7,2,"ion-card",2),c.Jb()),2&n&&(c.Xb("translucent",!0),c.xb(4),c.Xb("fullscreen",!0),c.xb(1),c.Xb("ngForOf",e.codeSnippets))},directives:[t.i,t.u,t.t,t.h,a.h,t.d,t.f,t.g,t.e],styles:[""]}),n})()}];let b=(()=>{class n{}return n.\u0275mod=c.Fb({type:n}),n.\u0275inj=c.Eb({factory:function(e){return new(e||n)},imports:[[o.i.forChild(p)],o.i]}),n})(),d=(()=>{class n{}return n.\u0275mod=c.Fb({type:n}),n.\u0275inj=c.Eb({factory:function(e){return new(e||n)},imports:[[t.v,a.b,r.a,b]]}),n})()}}]);