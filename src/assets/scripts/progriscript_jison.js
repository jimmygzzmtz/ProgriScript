/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var progriscript_jison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[17,43],$V1=[1,10],$V2=[2,7],$V3=[1,13],$V4=[17,43,52],$V5=[2,12],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,28],$Va=[1,30],$Vb=[2,14],$Vc=[1,35],$Vd=[7,19,25],$Ve=[12,18,30,54,83,94,95,98,99,102,107,115,116],$Vf=[1,66],$Vg=[1,76],$Vh=[1,77],$Vi=[1,75],$Vj=[1,78],$Vk=[1,79],$Vl=[2,46],$Vm=[1,82],$Vn=[2,92],$Vo=[1,93],$Vp=[7,19,25,31,66,70,73,74,75,76,77,78,82,83,87,88,97,114,119],$Vq=[2,26],$Vr=[7,19,25,66],$Vs=[7,19,25,66,70],$Vt=[7,19,25,31,66,70,73,74,75,76,77,78,114,119],$Vu=[7,19,25,31,66,70,73,74,75,76,77,78,82,83,114,119],$Vv=[7,19,25,31,66,70,73,74,75,76,77,78,82,83,87,88,114,119],$Vw=[12,18,30,83,94,95],$Vx=[19,25],$Vy=[1,137],$Vz=[2,101],$VA=[1,157],$VB=[2,108],$VC=[1,159],$VD=[2,31],$VE=[1,184];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"EXPRESSIONS":3,"PROGRAM":4,"EOF":5,"PROGRAM_NAME":6,"semicolon":7,"PROGRAM_AUX":8,"PROGRAM_AUX2":9,"MAIN":10,"program":11,"id":12,"VARS":13,"FUNCION":14,"MAIN_WRAPPER":15,"BLOQUE":16,"main":17,"lparen":18,"rparen":19,"var":20,"VARS_AUX":21,"TIPO":22,"ID_DECLARE_VAR":23,"VARS_AUX2":24,"comma":25,"int":26,"float":27,"char":28,"lsqbracket":29,"cte_int":30,"rsqbracket":31,"ID_DECLARE_VAR_AUX":32,"ID_ACCESS_VAR":33,"ID_WRAPPER":34,"ID_SIMPLE_VAR":35,"EXP":36,"ID_ACCESS_VAR_AUX":37,"ID_LLAMADA_FUNCION":38,"PARAMS_LLAMADA_FUNCION":39,"PARAM":40,"PARAMS_LLAMADA_FUNCION_AUX":41,"EXPRESION":42,"module":43,"FUNCION_ID_WRAPPER":44,"FUNCION_PARAM_LIST":45,"VARS_FUNC":46,"FUNCION_TIPO":47,"VARS_FUNC_AUX":48,"void":49,"VAR_FUNC_PARAM":50,"FUNCION_PARAM_LIST_AUX":51,"lbracket":52,"BLOQUE_AUX":53,"rbracket":54,"ESTATUTO":55,"ASIGNACION":56,"LECTURA":57,"ESCRITURA":58,"DECISION_IF":59,"CONDICIONAL_WHILE":60,"NO_CONDICIONAL_FOR":61,"RETORNO_FUNCION":62,"EXP_AND":63,"EXPRESION_AUX":64,"EXPRESION_AUX2":65,"or":66,"EXP_COMP":67,"EXP_AND_AUX":68,"EXP_AND_AUX2":69,"and":70,"EXP_COMP_AUX":71,"EXP_COMP_AUX2":72,"lessthan":73,"greaterthan":74,"isDifferent":75,"isEqual":76,"lessthanEqual":77,"greaterthanEqual":78,"TERMINO":79,"EXP_AUX":80,"EXP_AUX2":81,"plus":82,"minus":83,"FACTOR_WRAPPER":84,"TERMINO_AUX":85,"TERMINO_AUX2":86,"times":87,"divide":88,"FACTOR":89,"FACTOR_AUX":90,"FACTOR_AUX2":91,"BEGINPAREN":92,"VAR_CTE":93,"cte_float":94,"cte_char":95,"EQUALSSIGN":96,"equals":97,"return":98,"read":99,"ID_ACCESS_VAR_LECTURA":100,"LECTURA_AUX":101,"write":102,"ESCRITURA_AUX_WRAPPER":103,"ESCRITURA_AUX2":104,"ESCRITURA_AUX":105,"letrero":106,"if":107,"EXPRESION_IF":108,"then":109,"DECISION_IF_AUX":110,"ELSE_START":111,"else":112,"WHILE_START":113,"do":114,"while":115,"for":116,"CHECK_IS_NUMBER":117,"FOR_EXP1":118,"to":119,"FOR_EXP2":120,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"semicolon",11:"program",12:"id",17:"main",18:"lparen",19:"rparen",20:"var",25:"comma",26:"int",27:"float",28:"char",29:"lsqbracket",30:"cte_int",31:"rsqbracket",43:"module",49:"void",52:"lbracket",54:"rbracket",66:"or",70:"and",73:"lessthan",74:"greaterthan",75:"isDifferent",76:"isEqual",77:"lessthanEqual",78:"greaterthanEqual",82:"plus",83:"minus",87:"times",88:"divide",94:"cte_float",95:"cte_char",97:"equals",98:"return",99:"read",102:"write",106:"letrero",107:"if",109:"then",112:"else",114:"do",115:"while",116:"for",119:"to"},
productions_: [0,[3,2],[4,5],[6,2],[8,1],[8,0],[9,2],[9,0],[10,2],[15,3],[13,2],[21,5],[21,0],[24,3],[24,0],[22,1],[22,1],[22,1],[23,1],[23,5],[32,3],[32,0],[33,2],[33,5],[33,5],[34,1],[35,0],[38,0],[39,2],[39,0],[41,3],[41,0],[40,1],[37,3],[37,0],[14,7],[44,2],[46,1],[48,1],[48,0],[47,1],[47,1],[50,2],[45,2],[45,0],[51,3],[51,0],[16,3],[53,2],[53,0],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,2],[42,2],[64,2],[64,0],[65,1],[63,2],[68,2],[68,0],[69,1],[67,2],[71,2],[71,0],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[36,2],[80,2],[80,0],[81,1],[81,1],[79,2],[85,2],[85,0],[86,1],[86,1],[84,1],[89,1],[89,1],[90,3],[92,1],[91,1],[91,2],[93,1],[93,1],[93,1],[93,1],[56,4],[96,1],[62,5],[57,6],[101,3],[101,0],[100,1],[58,6],[103,1],[105,1],[105,1],[104,3],[104,0],[59,5],[108,3],[110,2],[110,0],[111,1],[60,4],[113,1],[61,9],[117,1],[118,1],[120,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        // TODO: return quads, funcs, constants for VM
        pushQuad(OP_END, null, null, null);

        //console.log("quads:");
        //console.log(quads);

        // create funcDirectory for VM, that only sends data needed by VM
        var vmFuncs = new Map();

        for (let key of functionDirectory.keys()) {
            var value = functionDirectory.get(key);
            vmFuncs.set(key, {tempVarsUsed: value.tempVarsUsed, varsTableKeyLength: value.varTable.size,
                returnDirs: value.returnDirs});
        }

        // create constTable for VM, that uses dir as the key
        var vmConsts = {int: [], float: [], char: [], letrero: []};

        for (let key of constTable.keys()) {
            var dir = constTable.get(key);
            if (dir >= CONST_INT && dir < CONST_FLOAT) {
                vmConsts.int[dir - CONST_INT] = key;
            }
            else if (dir >= CONST_FLOAT && dir < CONST_CHAR) {
                vmConsts.float[dir - CONST_FLOAT] = key; 
            }
            else if (dir >= CONST_CHAR && dir < CONST_LETRERO) {
                vmConsts.char[dir - CONST_CHAR] = key; 
            }
            else if (dir >= CONST_LETRERO) {
                vmConsts.letrero[dir - CONST_LETRERO] = key; 
            }
        }
        
        // data sent to VM
        var returnObj = {
            quads: quads,
            funcs: vmFuncs,
            constTable: vmConsts,
            programName: programName
        };

        // Resets variables and releases Memory
        resetVariables();

        return returnObj;
    
break;
case 3:

        pushQuad(OP_GOTO, null, null, null);
        stackJumps.push(quadCount - 1);

        programName = $$[$0];
        //currentFunctionId = programName;
        createFunction(programName, "program", _$[$0].first_line);
        calledFuncs.push(programName);
    
break;
case 9:

        var posGotoMain = stackJumps.pop();
        fillQuad(posGotoMain);
    
break;
case 15:

        currentType = "int";
    
break;
case 16:

        currentType = "float";
    
break;
case 17:

        currentType = "char";
    
break;
case 18:

        this.$ = createVariable($$[$0], _$[$0].first_line);
    
break;
case 24:

        if (top(calledParams).params.length != top(calledParams).paramCounter) {
            flagError(ERROR_WRONG_NUM_PARAMS, _$[$0-4].first_line);
        }

        // generate quad(gosub, procedure-name, initial-address (quad in which func starts))
        pushQuad(OP_GOSUB, top(calledFuncs), functionDirectory.get(top(calledFuncs)).quadCounter, null);

        // generate temp dir for return value of the called function
        var returnType = functionDirectory.get(top(calledFuncs)).type;
        if (returnType != "void") {
            var returnTemp = generateDir(startingDirCodes.get("temp," + returnType));
            stackOperands.push(returnTemp);

            functionDirectory.get(top(calledFuncs)).returnDirs.push(returnTemp);
            this.$ = {dir: returnTemp};
        }
        else {
            // return invalid dir in the case of void
            this.$ = {dir: -1};
        }

        calledParams.pop();
        calledFuncs.pop();
    
break;
case 25:

        lastReadId = $$[$0];
    
break;
case 26:

        if (variableExists(lastReadId, _$[$0].first_line)) {
            var dir = getVariable(lastReadId, currentFunctionId, _$[$0].first_line).dir;
            pushOperand(dir);
            this.$ = {name: lastReadId, dir: dir};
        }
    
break;
case 27:

        // check that function id exists in functionDirectory
        if (!functionDirectory.has(lastReadId)) {
            flagError(ERROR_UNKNOWN_FUNCTION, _$[$0].first_line);
        }

        calledFuncs.push(lastReadId);
        calledParams.push({params: functionDirectory.get(lastReadId).params, paramCounter: 0})

        // generate ERA size quad
        var size = functionDirectory.get(lastReadId).varTable.size + functionDirectory.get(lastReadId).tempVarsUsed;
        pushQuad(OP_ERA, size, null, null);
    
break;
case 32:

        var dir = stackOperands.pop();
        // stretch: cast int from EXPRESION to float, in order to match param type, if its the case
        var params = top(calledParams).params;
        var paramCounter = top(calledParams).paramCounter;
        if (paramCounter >= params.length) {
            flagError(ERROR_WRONG_NUM_PARAMS, _$[$0].first_line);
        }
        if (getTypeFromDir(dir) != params[paramCounter]) {
            flagError(ERROR_TYPE_MISMATCH, _$[$0].first_line);
        }

        pushQuad(OP_PARAMETER, dir, paramCounter, null);

        top(calledParams).paramCounter++;
    
break;
case 35:

        // punto 7
        // check if non-void function has a return statement
        if (functionDirectory.get(currentFunctionId).type != "void" && !functionDirectory.get(currentFunctionId).foundReturnStatement) {
            flagError(ERROR_NO_RETURN_STATEMENT, _$[$0-6].first_line);
        }

        // save number of temporal variables used
        var numberTemporalVarsUsed = 0;
        for (var i = 6; i <= 9; i++) {
            numberTemporalVarsUsed += (counters[i] - functionDirectory.get(currentFunctionId).initialCounters[i]);
        } 
        functionDirectory.get(currentFunctionId).tempVarsUsed = numberTemporalVarsUsed;

        // release dirs for local variables, temps. Consts are NOT released
        var counterTemps = [counters[10], counters[11], counters[12], counters[13]];
        counters = functionDirectory.get(currentFunctionId).initialCounters.slice(0);
        counters[10] = counterTemps[0];
        counters[11] = counterTemps[1];
        counters[12] = counterTemps[2];
        counters[13] = counterTemps[3];

        pushQuad(OP_ENDFUNC, null, null, null);

        // change currentFunctionId back to the previous function
        calledFuncs.pop();
        currentFunctionId = top(calledFuncs);
    
break;
case 36:

        createFunction($$[$0], $$[$0-1], _$[$0].first_line);
        calledFuncs.push($$[$0]);
    
break;
case 37:

        // el punto 5 es mamada
        // punto 6
        functionDirectory.get(currentFunctionId).quadCounter = quadCount;
    
break;
case 42:

        // pushear a params de la funcion el tipo
        functionDirectory.get(currentFunctionId).params.push($$[$0-1]);
    
break;
case 61:

        pushOperator(OP_OR);
        this.$ = OP_OR;
    
break;
case 62:

        if (top(stackOperators) == OP_OR) {
            addQuad(_$[$0-1].first_line);
        }
    
break;
case 65:

        pushOperator(OP_AND);
        this.$ = OP_AND;
    
break;
case 66:

        if (top(stackOperators) == OP_AND) {
            addQuad(_$[$0-1].first_line);
        }
    
break;
case 69:

        pushOperator(OP_LESSTHAN);
        this.$ = OP_LESSTHAN;
    
break;
case 70:

        pushOperator(OP_GREATERTHAN);
        this.$ = OP_GREATERTHAN;
    
break;
case 71:

        pushOperator(OP_ISDIFFERENT);
        this.$ = OP_ISDIFFERENT;
    
break;
case 72:

        pushOperator(OP_ISEQUAL);
        this.$ = OP_ISEQUAL;
    
break;
case 73:

        pushOperator(OP_LESSTHANEQUAL);
        this.$ = OP_LESSTHANEQUAL;
    
break;
case 74:

        pushOperator(OP_GREATERTHANEQUAL);
        this.$ = OP_GREATERTHANEQUAL;
    
break;
case 75:

        if (top(stackOperators) == OP_LESSTHAN || top(stackOperators) == OP_GREATERTHAN
            || top(stackOperators) == OP_ISDIFFERENT || top(stackOperators) == OP_ISEQUAL
            || top(stackOperators) == OP_LESSTHANEQUAL || top(stackOperators) == OP_GREATERTHANEQUAL) {
                addQuad(_$[$0-1].first_line);
        }
    
break;
case 78:

        pushOperator(OP_PLUS);
        this.$ = OP_PLUS;
    
break;
case 79:

        pushOperator(OP_MINUS);
        this.$ = OP_MINUS;
    
break;
case 80:

        if (top(stackOperators) == OP_PLUS || top(stackOperators) == OP_MINUS) {
            addQuad(_$[$0-1].first_line);
        }
    
break;
case 83:

        pushOperator(OP_TIMES);
        this.$ = OP_TIMES;
    
break;
case 84:

        pushOperator(OP_DIVIDE);
        this.$ = OP_DIVIDE;
    
break;
case 85:

        if (top(stackOperators) == OP_TIMES || top(stackOperators) == OP_DIVIDE) {
            addQuad(_$[$0].first_line);
        }
    
break;
case 88:

        var topOp = stackOperators.pop();
        if (topOp != "lparen") {
            flagError(ERROR_EXP_PAREN, _$[$0-2].first_line);
        }
    
break;
case 89:

        pushOperator("lparen");
    
break;
case 90: case 92:

        this.$ = $$[$0];
    
break;
case 91:

        var operandDir = stackOperands.pop();
        
        // check varType of operand  
        operandVarType = getTypeFromDir(operandDir);  
        // if operand type is not int or float, error  
        if (operandVarType != "int" && operandVarType != "float") {
            flagError(ERROR_ARITHMETIC_NON_NUMBER, _$[$0-1].first_line);
        }

        // add -1 to constTable
        minusOneDir = addConstant(-1, operandVarType == "int" ? CONST_INT : CONST_FLOAT);
    
        // use semantic cube to generate the direction for the temporary var
        var resultType = semanticCube(minusOneDir, operandDir, "times");
        if (resultType == undefined) {
            flagError(ERROR_TYPE_MISMATCH, _$[$0-1].first_line);
        }

        var dirTemp = generateDir(startingDirCodes.get("temp," + resultType));

        // push quad for -1 * operand received
        pushQuad(OP_TIMES, minusOneDir, operandDir, dirTemp);

        // add dir of temporary var to operand stack
        pushOperand(dirTemp);
        this.$ = {dir: dirTemp};
    
break;
case 93:

        var val = Number($$[$0]);
        var resultDir = addConstant(val, CONST_INT);
        pushOperand(resultDir);
        this.$ = {dir: resultDir};
    
break;
case 94:

        var val = Number($$[$0]);
        var resultDir = addConstant(val, CONST_FLOAT);
        pushOperand(resultDir);
        this.$ = {dir: resultDir};
    
break;
case 95:

        var resultDir = addConstant($$[$0], CONST_CHAR);
        pushOperand(resultDir);
        this.$ = {dir: resultDir};
    
break;
case 96:

        //printStacks();
        // pops
        var dirRight = stackOperands.pop();
        var dirLeft = stackOperands.pop();
        var operator = stackOperators.pop();
        
        // checar si el tipo de el temp es el mismo (o compatible) que el de la variable
        if (semanticCube(dirLeft, dirRight, "equals") == undefined) {
            flagError(ERROR_TYPE_MISMATCH, _$[$0-3].first_line);
        }

        // push new quad
        pushQuad(operator, dirRight, dirLeft, null);
    
break;
case 97:

        pushOperator(OP_EQUALS);
        this.$ = OP_EQUALS;
    
break;
case 98:

        functionDirectory.get(currentFunctionId).foundReturnStatement = true;
        
        var exp = stackOperands.pop();
        
        // Check that the type of the returned exp is the same as the function type
        if (functionDirectory.get(currentFunctionId).type != getTypeFromDir(exp)) {
            flagError(ERROR_TYPE_MISMATCH, _$[$0-4].first_line);
        }

        // If exp is not a temp, generate a temporary copy (to not use the variable dir, as its value may change)
        if (exp < 60000 || exp > 99999) {
            var dirTemp = generateDir(startingDirCodes.get("temp," + getTypeFromDir(exp)));
            pushQuad(OP_EQUALS, exp, dirTemp, null);

            exp = dirTemp;
        }

        // push new quad
        pushQuad(OP_RETURN, exp, null, null);
    
break;
case 102:

        // pop operand
        var dirOperand = stackOperands.pop();

        // push write quad with dir for each argument
        pushQuad(OP_READ, dirOperand, null, null);
    
break;
case 104:

        // pop operand
        var dirOperand = stackOperands.pop();

        // push write quad with dir for each argument
        pushQuad(OP_WRITE, dirOperand, null, null);
    
break;
case 106:

        var resultDir = addConstant($$[$0], CONST_LETRERO);
        pushOperand(resultDir);
        this.$ = {dir: resultDir};
    
break;
case 109:

        var end = stackJumps.pop();
        //end es el num del quad que vamos a rellenar
        //quadcount es hacia donde va saltar (lo que va rellenar en el quad)
        fillQuad(end);
        //quads[end].dir2 = quadCount;
        //end = pjumps.pop;
        //fill(end, quadcount);
    
break;
case 110:

        // check que expresion sea bool
        var dirExpressionIf = stackOperands.pop();
        if (getTypeFromDir(dirExpressionIf) == "bool") {
            
            // dir2 of the gotof quad is the quad we will goto, will be filled later
            pushQuad(OP_GOTOF, dirExpressionIf, null, null);
            //cuando llegas al else o al final del if, llamamos una funcion que hace pop del stackjumps y lo llena, usando la posicion de quadcount - 1
            // push quadCount of the gotof quad 
            stackJumps.push(quadCount - 1);
        }
        else {
            flagError(ERROR_TYPE_MISMATCH, _$[$0-2].first_line);
        }
    
break;
case 113:

        pushQuad(OP_GOTO, null, null, null);
        var posGotoF = stackJumps.pop();
        stackJumps.push(quadCount - 1);
        fillQuad(posGotoF);
    
break;
case 114:

        var endJump = stackJumps.pop();
        var returnJump = stackJumps.pop();
        pushQuad(OP_GOTO, returnJump, null, null);
        fillQuad(endJump);
    
break;
case 115:

        stackJumps.push(quadCount);
    
break;
case 116:

        // get for control variable
        var vControl = top(forVars).vControl;

        pushQuad(OP_PLUS, vControl, addConstant(1, CONST_INT), vControl);
        var quadGotoFFor = stackJumps.pop();
        var quadComparisonFor = stackJumps.pop();

        pushQuad(OP_GOTO, quadComparisonFor, null, null);
        quads[quadGotoFFor].dir2 = quadCount;

        // pop control variable from array of control variables
        forVars.pop();
    
break;
case 117:

        if (getTypeFromDir($$[$0].dir) != "int" && getTypeFromDir($$[$0].dir) != "float") {
            flagError(ERROR_TYPE_MISMATCH, _$[$0].first_line);
        }
    
break;
case 118:

        var exp = stackOperands.pop();
        if (getTypeFromDir(exp) != "int" && getTypeFromDir(exp) != "float") {
            flagError(ERROR_TYPE_MISMATCH, _$[$0].first_line);
        }
        else {
            // pop control variable from operand stack and save it internally
            var vControl = stackOperands.pop();
            forVars.push({vControl: vControl, vFinal: null});

            // check that control variable and exp are of compatible data types
            var resultType = semanticCube(vControl, exp, "equals");
            if (resultType == undefined) {
                flagError(ERROR_TYPE_MISMATCH, _$[$0].first_line);
            }
            pushQuad(OP_EQUALS, exp, vControl, null);
        }
    
break;
case 119:

        var exp = stackOperands.pop();
        if (getTypeFromDir(exp) != "int" && getTypeFromDir(exp) != "float") {
            flagError(ERROR_TYPE_MISMATCH, _$[$0].first_line);
        }
        else {
            var vControl = top(forVars).vControl;

            // use semantic cube to generate the direction for the temporary var
            var resultType = semanticCube(vControl, exp, "lessthan");
            if (resultType == undefined) {
                flagError(ERROR_TYPE_MISMATCH, _$[$0].first_line);
            }
            var dirTemp = generateDir(startingDirCodes.get("temp," + resultType));

            // quad for comparison in for loop
            pushQuad(OP_LESSTHAN, vControl, exp, dirTemp);

            stackJumps.push(quadCount - 1);
            pushQuad(OP_GOTOF, dirTemp, null, null);
            stackJumps.push(quadCount - 1);
        }
    
break;
}
},
table: [{3:1,4:2,6:3,11:[1,4]},{1:[3]},{5:[1,5]},{7:[1,6]},{12:[1,7]},{1:[2,1]},o($V0,[2,5],{8:8,13:9,20:$V1}),{7:[2,3]},{9:11,14:12,17:$V2,43:$V3},o($V0,[2,4]),o($V4,$V5,{21:14,22:15,26:$V6,27:$V7,28:$V8}),{10:19,15:20,17:[1,21]},{9:22,14:12,17:$V2,43:$V3},{22:26,26:$V6,27:$V7,28:$V8,44:23,47:24,49:[1,25]},o($V4,[2,10]),{12:$V9,23:27},{12:[2,15]},{12:[2,16]},{12:[2,17]},{5:[2,2]},{16:29,52:$Va},{18:[1,31]},{17:[2,6]},{18:[1,32]},{12:[1,33]},{12:[2,40]},{12:[2,41]},{7:$Vb,24:34,25:$Vc},o($Vd,[2,18],{29:[1,36]}),{5:[2,8]},o($Ve,[2,49],{53:37}),{19:[1,38]},{19:[2,44],22:41,26:$V6,27:$V7,28:$V8,45:39,50:40},{18:[2,36]},{7:[1,42]},{12:$V9,23:43},{30:[1,44]},{12:$Vf,18:$Vg,30:$Vh,33:55,34:63,36:67,42:54,54:[1,45],55:46,56:47,57:48,58:49,59:50,60:51,61:52,62:53,63:62,67:65,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk,98:[1,61],99:[1,56],102:[1,57],107:[1,58],113:59,115:[1,64],116:[1,60]},{52:[2,9]},{19:[1,80]},{19:$Vl,25:$Vm,51:81},{12:$V9,23:83},o($V4,$V5,{22:15,21:84,26:$V6,27:$V7,28:$V8}),{7:$Vb,24:85,25:$Vc},{31:[1,86]},o([5,12,17,18,30,43,54,83,94,95,98,99,102,107,112,115,116],[2,47]),o($Ve,[2,48]),o($Ve,[2,50]),o($Ve,[2,51]),o($Ve,[2,52]),o($Ve,[2,53]),o($Ve,[2,54]),o($Ve,[2,55]),o($Ve,[2,56]),{7:[1,87]},o([7,66,70,73,74,75,76,77,78,82,83,87,88],$Vn,{96:88,97:[1,89]}),{18:[1,90]},{18:[1,91]},{18:$Vo,108:92},{18:$Vo,108:94},{12:$Vf,34:95},{18:[1,96]},o($Vd,[2,60],{64:97,65:98,66:[1,99]}),o($Vp,$Vq,{35:100,18:[1,102],29:[1,101]}),{18:[2,115]},o($Vr,[2,64],{68:103,69:104,70:[1,105]}),o([7,18,19,25,29,31,66,70,73,74,75,76,77,78,82,83,87,88,97,114,119],[2,25]),o($Vs,[2,68],{71:106,72:107,73:[1,108],74:[1,109],75:[1,110],76:[1,111],77:[1,112],78:[1,113]}),o($Vt,[2,77],{80:114,81:115,82:[1,116],83:[1,117]}),o($Vu,[2,82],{85:118,86:119,87:[1,120],88:[1,121]}),o($Vv,[2,85]),o($Vv,[2,86]),o($Vv,[2,87]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:67,42:122,63:62,67:65,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Vv,[2,90]),{12:$Vf,30:$Vh,33:123,34:63,93:124,94:$Vj,95:$Vk},o($Vw,[2,89]),o($Vv,[2,93]),o($Vv,[2,94]),o($Vv,[2,95]),{13:127,20:$V1,46:125,48:126,52:[2,39]},{19:[2,43]},{22:41,26:$V6,27:$V7,28:$V8,50:128},o($Vx,[2,42]),o($V4,[2,11]),{7:[2,13]},o($Vd,[2,21],{32:129,29:[1,130]}),o($Ve,[2,57]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:67,42:131,63:62,67:65,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Vw,[2,97]),{12:$Vf,33:133,34:63,100:132},{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:67,42:136,63:62,67:65,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk,103:134,105:135,106:$Vy},{109:[1,138]},{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:67,42:139,63:62,67:65,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},{114:[1,140]},{35:142,97:$Vq,117:141},{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:143,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Vd,[2,58]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:67,42:144,63:62,67:65,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Vw,[2,61]),o($Vp,[2,22]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:145,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o([12,18,19,30,83,94,95],[2,27],{38:146}),o($Vr,[2,62]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:67,63:147,67:65,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Vw,[2,65]),o($Vs,[2,66]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:67,67:148,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Vw,[2,69]),o($Vw,[2,70]),o($Vw,[2,71]),o($Vw,[2,72]),o($Vw,[2,73]),o($Vw,[2,74]),o($Vt,[2,75]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:149,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Vw,[2,78]),o($Vw,[2,79]),o($Vu,[2,80]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,79:150,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Vw,[2,83]),o($Vw,[2,84]),{19:[1,151]},o($Vv,$Vn),o($Vv,[2,91]),{16:152,52:$Va},{52:[2,37]},{52:[2,38]},{19:$Vl,25:$Vm,51:153},o($Vd,[2,19]),{30:[1,154]},{7:[1,155]},{19:$Vz,25:$VA,101:156},o($Vx,[2,102]),{19:$VB,25:$VC,104:158},o($Vx,[2,104]),o($Vx,[2,105]),o($Vx,[2,106]),{16:160,52:$Va},{19:[1,161]},{16:162,52:$Va},{97:[1,163]},{97:[2,117]},{19:[1,164]},o($Vd,[2,59]),{31:[1,165]},{12:$Vf,18:$Vg,19:[2,29],30:$Vh,33:123,34:63,36:67,39:166,40:167,42:168,63:62,67:65,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Vr,[2,63]),o($Vs,[2,67]),o($Vt,[2,76]),o($Vu,[2,81]),o($Vv,[2,88]),o($V0,[2,35]),{19:[2,45]},{31:[1,169]},o($Ve,[2,96]),{19:[1,170]},{12:$Vf,33:133,34:63,100:171},{19:[1,172]},{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:67,42:136,63:62,67:65,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk,103:173,105:135,106:$Vy},o($Ve,[2,112],{110:174,111:175,112:[1,176]}),o([109,114],[2,110]),o($Ve,[2,114]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:178,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk,118:177},{7:[1,179]},o($Vp,[2,34],{37:180,29:[1,181]}),{19:[1,182]},{19:$VD,25:$VE,41:183},o($Vx,[2,32]),o($Vd,[2,20]),{7:[1,185]},{19:$Vz,25:$VA,101:186},{7:[1,187]},{19:$VB,25:$VC,104:188},o($Ve,[2,109]),{16:189,52:$Va},{52:[2,113]},{119:[1,190]},{119:[2,118]},o($Ve,[2,98]),o($Vp,[2,23]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:191,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Vp,[2,24]),{19:[2,28]},{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:67,40:192,42:168,63:62,67:65,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk},o($Ve,[2,99]),{19:[2,100]},o($Ve,[2,103]),{19:[2,107]},o($Ve,[2,111]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:63,36:194,79:68,83:$Vi,84:69,89:70,90:71,91:72,92:73,93:74,94:$Vj,95:$Vk,120:193},{31:[1,195]},{19:$VD,25:$VE,41:196},{114:[1,197]},{114:[2,119]},o($Vp,[2,33]),{19:[2,30]},{16:198,52:$Va},o($Ve,[2,116])],
defaultActions: {5:[2,1],7:[2,3],16:[2,15],17:[2,16],18:[2,17],19:[2,2],22:[2,6],25:[2,40],26:[2,41],29:[2,8],33:[2,36],38:[2,9],64:[2,115],81:[2,43],85:[2,13],126:[2,37],127:[2,38],142:[2,117],153:[2,45],176:[2,113],178:[2,118],183:[2,28],186:[2,100],188:[2,107],194:[2,119],196:[2,30]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    // Maps declarations
    var semCube = new Map();
    var functionDirectory = new Map();
    var constTable = new Map();
    var startingDirCodes = new Map();

    var stackOperators = [];
	var stackOperands = [];
	var stackJumps = [];

    var quads = [];
    var quadCount = 0;

    // for variables lists
    var forVars = [];
    // for function calls
    var calledFuncs = [];
    // for function signature and parameter type checking 
    var calledParams = [];

    // variables to know current state
    var programName = "";
    var currentFunctionId = "";
    var currentType = "";
    var lastReadId = "";

    // 14 counters for each dir section, position for each counter is StartingDir/10000
    var counters = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

    // Starting dirs for each type and scope
    const GLOBAL_INT = 0;
    const GLOBAL_FLOAT = 10000;
    const GLOBAL_CHAR = 20000;
    const LOCAL_INT = 30000;
    const LOCAL_FLOAT = 40000;
    const LOCAL_CHAR = 50000;
    const TEMP_INT = 60000;
    const TEMP_FLOAT = 70000;
    const TEMP_CHAR = 80000;
    const TEMP_BOOL = 90000;
    const CONST_INT = 100000;
    const CONST_FLOAT = 110000;
    const CONST_CHAR = 120000;
    const CONST_LETRERO = 130000;

    // Operation codes
    const OP_READ = "read";
    const OP_WRITE = "write";
    const OP_EQUALS = "equals";
    const OP_PLUS = "plus";
    const OP_MINUS = "minus";
    const OP_TIMES = "times";
    const OP_DIVIDE = "divide";
    const OP_LESSTHAN = "lessthan";
    const OP_GREATERTHAN = "greaterthan";
    const OP_LESSTHANEQUAL = "lessthanEqual";
    const OP_GREATERTHANEQUAL = "greaterthanEqual";
    const OP_ISDIFFERENT = "isDifferent";
    const OP_ISEQUAL = "isEqual";
    const OP_AND = "and";
    const OP_OR = "or";
    const OP_GOTO = "goto";
    const OP_GOTOF = "gotoF";
    const OP_ERA = "era";
    const OP_PARAMETER = "parameter";
    const OP_GOSUB = "goSub";
    const OP_RETURN = "return";
    const OP_ENDFUNC = "endFunc";
    const OP_END = "end";

    // Error codes
    const ERROR_TYPE_MISMATCH = 1;
    const ERROR_VAR_REDECLATION = 2;
    const ERROR_FUNC_REDECLARATION = 3;
    const ERROR_UNKNOWN_VARIABLE = 4;
    const ERROR_NO_RETURN_STATEMENT = 5;
    const ERROR_ARITHMETIC_NON_NUMBER = 6;
    const ERROR_UNKNOWN_FUNCTION = 7;
    const ERROR_WRONG_NUM_PARAMS = 8;
    const ERROR_EXP_PAREN = 9;

    // Func
    function flagError(errorCode, lineNumber=0){
        var message = "";
        switch (errorCode) {
            case ERROR_TYPE_MISMATCH:
                message = "Type Mismatch";
                break;
            case ERROR_VAR_REDECLATION:
                message = "Variable Redeclaration";
                break;
            case ERROR_FUNC_REDECLARATION:
                message = "Function Redeclaration";
                break;
            case ERROR_UNKNOWN_VARIABLE:
                message = "Unknown Variable";
                break;
            case ERROR_NO_RETURN_STATEMENT:
                message = "No return statement";
                break;
            case ERROR_ARITHMETIC_NON_NUMBER:
                message = "Arithmetic operation with non-numbers";
                break;
            case ERROR_UNKNOWN_FUNCTION:
                message = "Unknown Function";
                break;
            case ERROR_WRONG_NUM_PARAMS:
                message = "Wrong number of parameters in function call";
                break;
            case ERROR_EXP_PAREN:
                message = "Error in expression inside parenthesis";
                break;
        }

        // TO-DO: change to "Compilation error on line x:"
        throw new Error("Compilation error on line " + lineNumber + ": " + message);
    }

    // This sets up the elements of the semantic cube by inserting the combinations and their resulting types.
    // Also initializes values for startingDirCodes map
    function fillMaps(){
        semCube.set("int,int,plus", "int");
        semCube.set("int,int,minus", "int");
        semCube.set("int,int,times", "int");
        semCube.set("int,int,divide", "int");
        semCube.set("int,float,plus", "float");
        semCube.set("int,float,minus", "float");
        semCube.set("int,float,times", "float");
        semCube.set("int,float,divide", "float");
        semCube.set("int,letrero,plus", "letrero");
        
        semCube.set("float,int,plus", "float");
        semCube.set("float,int,minus", "float");
        semCube.set("float,int,times", "float");
        semCube.set("float,int,divide", "float");
        semCube.set("float,float,plus", "float");
        semCube.set("float,float,minus", "float");
        semCube.set("float,float,times", "float");
        semCube.set("float,float,divide", "float");
        semCube.set("float,letrero,plus", "letrero");
        
        semCube.set("char,letrero,plus", "letrero");
        
        semCube.set("letrero,int,plus", "letrero");
        semCube.set("letrero,float,plus", "letrero");
        semCube.set("letrero,char,plus", "letrero");
        semCube.set("letrero,letrero,plus", "letrero");
        
        // int/float equal comparisons
        semCube.set("int,int,isEqual", "bool");
        semCube.set("int,int,isDifferent", "bool");
        semCube.set("int,float,isEqual", "bool");
        semCube.set("int,float,isDifferent", "bool");
        semCube.set("float,int,isEqual", "bool");
        semCube.set("float,int,isDifferent", "bool");
        semCube.set("float,float,isEqual", "bool");
        semCube.set("float,float,isDifferent", "bool");

        // int/float numeric comparisons        
        semCube.set("int,int,lessthan", "bool");
        semCube.set("int,int,greaterthan", "bool");
        semCube.set("int,int,lessthanEqual", "bool");
        semCube.set("int,int,greaterthanEqual", "bool");
        semCube.set("int,float,lessthan", "bool");
        semCube.set("int,float,greaterthan", "bool");
        semCube.set("int,float,lessthanEqual", "bool");
        semCube.set("int,float,greaterthanEqual", "bool");
        semCube.set("float,int,lessthan", "bool");
        semCube.set("float,int,greaterthan", "bool");
        semCube.set("float,int,lessthanEqual", "bool");
        semCube.set("float,int,greaterthanEqual", "bool");
        semCube.set("float,float,lessthan", "bool");
        semCube.set("float,float,greaterthan", "bool");
        semCube.set("float,float,lessthanEqual", "bool");
        semCube.set("float,float,greaterthanEqual", "bool");
        
        // char/letrero equal comparisons
        semCube.set("char,char,isEqual", "bool");
        semCube.set("char,char,isDifferent", "bool");
        semCube.set("char,letrero,isEqual", "bool");
        semCube.set("char,letrero,isDifferent", "bool");
        semCube.set("letrero,letrero,isEqual", "bool");
        semCube.set("letrero,letrero,isDifferent", "bool");
        semCube.set("letrero,char,isEqual", "bool");
        semCube.set("letrero,char,isDifferent", "bool");

        // assignment
        semCube.set("int,int,equals", "int");
        semCube.set("float,float,equals", "float");
        semCube.set("char,char,equals", "char");
        semCube.set("letrero,letrero,equals", "letrero");
        semCube.set("float,int,equals", "float");

        // logic operations
        semCube.set("bool,bool,and", "bool");
        semCube.set("bool,bool,or", "bool");

        startingDirCodes.set("global,int", GLOBAL_INT);
        startingDirCodes.set("global,float", GLOBAL_FLOAT);
        startingDirCodes.set("global,char", GLOBAL_CHAR);
        startingDirCodes.set("local,int", LOCAL_INT);
        startingDirCodes.set("local,float", LOCAL_FLOAT);
        startingDirCodes.set("local,char", LOCAL_CHAR);
        startingDirCodes.set("temp,int", TEMP_INT);
        startingDirCodes.set("temp,float", TEMP_FLOAT);
        startingDirCodes.set("temp,char", TEMP_CHAR);
        startingDirCodes.set("temp,bool", TEMP_BOOL);
        startingDirCodes.set("const,int", CONST_INT);
        startingDirCodes.set("const,float", CONST_FLOAT);
        startingDirCodes.set("const,char", CONST_CHAR);
        startingDirCodes.set("const,letrero", CONST_LETRERO);
    }

    fillMaps();

    // returns the resulting type of an operation
    function semanticCube(operand1, operand2, operator) {
        var typeOperand1 = getTypeFromDir(operand1);
        var typeOperand2 = getTypeFromDir(operand2);
        var result = semCube.get(typeOperand1 + "," + typeOperand2 + "," + operator);
        return result;
    }

    // adds a function to the function directory
    function createFunction(id, funcType, lineNumber) {
        if (!functionDirectory.has(id)) {
            currentFunctionId = id;
            var countersCopy = counters.slice(0);
            functionDirectory.set(id, {type: funcType, varTable: new Map(), params: [], quadCounter: 0, paramCounter: 0, 
            initialCounters: countersCopy, tempVarsUsed: 0, foundReturnStatement: false, returnDirs: []});
        }
        else {
            flagError(ERROR_FUNC_REDECLARATION, lineNumber);
        }
    }

    // adds a variable to the variable table of a function in the directory
    // and returns the dir of the created variable
    function createVariable(id, lineNumber) {
        var varTable = functionDirectory.get(currentFunctionId).varTable;
        if (!varTable.has(id)) {
            var scope = scopeIsGlobal() ? "global" : "local";
            var generatedDir = generateDir(startingDirCodes.get(scope + "," + currentType));

            varTable.set(id, {type: currentType, dir: generatedDir});
            return generatedDir;
        }
        else {
            flagError(ERROR_VAR_REDECLATION, lineNumber);
        }
    }

    function variableExists(name, lineNumber) {
        var varTable = functionDirectory.get(currentFunctionId).varTable;
        var exists = varTable.has(name);
        if (!exists && !scopeIsGlobal()) {
            varTable = functionDirectory.get(programName).varTable;
            exists = varTable.has(name);
        }
        if (exists) {
            return true;
        }
        else {
            flagError(ERROR_UNKNOWN_VARIABLE, lineNumber);
        }
    }

    // returns a variable, given its id and function id
    function getVariable(id, funcId, lineNumber) {
        var varTable = functionDirectory.get(funcId).varTable;
        if (varTable.has(id)) {
            return varTable.get(id);
        }
        else if (!scopeIsGlobal()) {
            varTable = functionDirectory.get(programName).varTable;
            if (varTable.has(id)) {
                return varTable.get(id);
            }
        }
        else {
            flagError(ERROR_UNKNOWN_VARIABLE, lineNumber);
        }
    }
    
    // adds a constant to the constTable and returns its dir
    function addConstant(val, startingDir) {
        if (!constTable.has(val)) {
            constTable.set(val, generateDir(startingDir));
        }
        return constTable.get(val);
    }

    function printStacks(){
        console.log("stacks:");
        console.log(stackOperands);
        console.log(stackOperators);
    }

    function fillQuad(quadToFill) {
        quads[quadToFill].dir2 = quadCount;
    }

    function addQuad(lineNumber) {
        // pops
        var dirRight = stackOperands.pop();
        var dirLeft = stackOperands.pop();
        var operator = stackOperators.pop();
        
        // use semantic cube to generate the direction for the temporary var
        var resultType = semanticCube(dirLeft, dirRight, operator);

        if (resultType == undefined) {
            flagError(ERROR_TYPE_MISMATCH, lineNumber);
        }

        var dirTemp = generateDir(startingDirCodes.get("temp," + resultType));

        // push new quad
        pushQuad(operator, dirLeft, dirRight, dirTemp);

        // add dir of temporary var to operand stack
        pushOperand(dirTemp);
        return dirTemp;
    }

    function pushQuad(operator, dir1, dir2, dir3) {
        quads.push({operator: operator, dir1: dir1, dir2: dir2, dir3: dir3});
        quadCount++;
    }

    function pushOperator(operator){
        stackOperators.push(operator);
    }

    function pushOperand(operand){
        stackOperands.push(operand);
    }

    function generateDir(startingDir) {
        // make copy of counter of direction type, and then add to counter
        var dirCounter = startingDir + counters[startingDir / 10000];
        counters[startingDir / 10000]++;
        // return counter copy
        return dirCounter;
    }

    function getTypeFromDir(dir) {
        //depending on range get type
        if ((dir >= GLOBAL_INT && dir < GLOBAL_FLOAT) || (dir >= LOCAL_INT && dir < LOCAL_FLOAT) 
            || (dir >= TEMP_INT && dir < TEMP_FLOAT) || (dir >= CONST_INT && dir < CONST_FLOAT)) {
                return "int";
        }
        if ((dir >= GLOBAL_FLOAT && dir < GLOBAL_CHAR) || (dir >= LOCAL_FLOAT && dir < LOCAL_CHAR) 
            || (dir >= TEMP_FLOAT && dir < TEMP_CHAR) || (dir >= CONST_FLOAT && dir < CONST_CHAR)) {
                return "float";
        }
        if ((dir >= GLOBAL_CHAR && dir < LOCAL_INT) || (dir >= LOCAL_CHAR && dir < TEMP_INT) 
            || (dir >= TEMP_CHAR && dir < TEMP_BOOL) || (dir >= CONST_CHAR && dir < CONST_LETRERO)) {
                return "char";
        }
        if (dir >= TEMP_BOOL && dir < CONST_INT){
                return "bool";
        }
        if (dir >= CONST_LETRERO) {
            return "letrero";
        }
    }

    function scopeIsGlobal() {
        return currentFunctionId == programName;
    }

    function top(stack) {
        return stack[stack.length - 1];
    }

    function printMap(map) {
        console.log("{");
        for (let key of map.keys()) {
            var value = map.get(key);
            console.log(key + ": " + JSON.stringify(map.get(key)) + ",");
            if (map.get(key).varTable) {
                console.log("VarTable of " + key + ":");
                var varTable = map.get(key).varTable;
                printMap(varTable);
            }
        }
        console.log("}");
    }

    // reset variables
    function resetVariables(){
        functionDirectory.clear();
        constTable.clear();
        stackOperands = [];
        stackOperands = [];
        stackJumps = [];
        quads = [];
        quadCount = 0;
        programName = "";
        currentFunctionId = "";
        currentType = "";
        counters = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        forVars = [];
        calledFuncs = [];
        calledParams = [];
        lastReadId = "";
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 20
break;
case 2:return 26
break;
case 3:return 27
break;
case 4:return 28
break;
case 5:return 49
break;
case 6:return 11
break;
case 7:return 17
break;
case 8:return 43
break;
case 9:return 107
break;
case 10:return 109
break;
case 11:return 112
break;
case 12:return 98
break;
case 13:return 102
break;
case 14:return 99
break;
case 15:return 115
break;
case 16:return 116
break;
case 17:return 119
break;
case 18:return 114
break;
case 19:return 76
break;
case 20:return 97
break;
case 21:return 'colon'
break;
case 22:return 7
break;
case 23:return 25
break;
case 24:return 52
break;
case 25:return 54
break;
case 26:return 29
break;
case 27:return 31
break;
case 28:return 18
break;
case 29:return 19
break;
case 30:return 82
break;
case 31:return 82
break;
case 32:return 83
break;
case 33:return 87
break;
case 34:return 88
break;
case 35:return 77
break;
case 36:return 78
break;
case 37:return 73
break;
case 38:return 74
break;
case 39:return 75
break;
case 40:return 'inverse'
break;
case 41:return 70
break;
case 42:return 66
break;
case 43:return 12
break;
case 44:return 94
break;
case 45:return 30
break;
case 46:return 95
break;
case 47:return 106
break;
case 48:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:void\b)/,/^(?:program\b)/,/^(?:main\b)/,/^(?:module\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:write\b)/,/^(?:read\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:to\b)/,/^(?:do\b)/,/^(?:==)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/,/^(?:\d+\.\d+)/,/^(?:\d+)/,/^(?:'.')/,/^(?:".*")/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = progriscript_jison;
exports.Parser = progriscript_jison.Parser;
exports.parse = function () { return progriscript_jison.parse.apply(progriscript_jison, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}