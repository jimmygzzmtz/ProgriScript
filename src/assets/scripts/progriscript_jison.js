/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var progriscript_jison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[14,37],$V1=[1,9],$V2=[2,6],$V3=[1,12],$V4=[14,37,42],$V5=[2,10],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,25],$Va=[2,12],$Vb=[1,29],$Vc=[8,16,23],$Vd=[1,37],$Ve=[28,44,79,80],$Vf=[2,38],$Vg=[1,61],$Vh=[1,68],$Vi=[1,69],$Vj=[1,70],$Vk=[1,59],$Vl=[1,54],$Vm=[1,55],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[7,15,28,44,66,67,79,80,83,84,86,90,95,97],$Vr=[2,50],$Vs=[1,89],$Vt=[1,90],$Vu=[1,91],$Vv=[1,92],$Vw=[1,93],$Vx=[1,94],$Vy=[1,95],$Vz=[1,96],$VA=[8,16,23,29,55,56,57,58,59,60,61,62,66,67,71,72,82,96,98],$VB=[8,16,23,29,55,56,57,58,59,60,61,62,96,98],$VC=[8,16,23,29,55,56,57,58,59,60,61,62,66,67,96,98],$VD=[8,16,23,29,55,56,57,58,59,60,61,62,66,67,71,72,96,98],$VE=[7,28,79,80],$VF=[2,77],$VG=[7,15,28,66,67,79,80],$VH=[2,35],$VI=[1,116],$VJ=[1,122],$VK=[2,87],$VL=[1,140],$VM=[2,92],$VN=[1,142],$VO=[16,23],$VP=[2,26],$VQ=[1,151];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"PROGRAM":4,"EOF":5,"program":6,"id":7,"semicolon":8,"PROGRAM_AUX":9,"PROGRAM_AUX2":10,"MAIN":11,"VARS":12,"FUNCION":13,"main":14,"lparen":15,"rparen":16,"BLOQUE":17,"var":18,"VARS_AUX":19,"TIPO":20,"ID_DECLARE_VAR":21,"VARS_AUX2":22,"comma":23,"int":24,"float":25,"char":26,"lsqbracket":27,"cte_int":28,"rsqbracket":29,"ID_DECLARE_VAR_AUX":30,"ID_ACCESS_VAR":31,"EXP":32,"ID_ACCESS_VAR_AUX":33,"PARAMS_LLAMADA_FUNCION":34,"EXPRESION":35,"PARAMS_LLAMADA_FUNCION_AUX":36,"module":37,"FUNCION_TIPO":38,"FUNCION_PARAM_LIST":39,"void":40,"FUNCION_PARAM_LIST_AUX":41,"lbracket":42,"BLOQUE_AUX":43,"rbracket":44,"ESTATUTO":45,"ASIGNACION":46,"LECTURA":47,"ESCRITURA":48,"DECISION_IF":49,"CONDICIONAL_WHILE":50,"NO_CONDICIONAL_FOR":51,"RETORNO_FUNCION":52,"EXPRESION_AUX":53,"EXPRESION_AUX2":54,"lessthan":55,"greaterthan":56,"isDifferent":57,"isEqual":58,"and":59,"or":60,"lessthanEqual":61,"greaterthanEqual":62,"TERMINO":63,"EXP_AUX":64,"EXP_AUX2":65,"plus":66,"minus":67,"FACTOR":68,"TERMINO_AUX":69,"TERMINO_AUX2":70,"times":71,"divide":72,"FACTOR_AUX":73,"FACTOR_AUX2":74,"BEGINPAREN":75,"FACTOR_AUX3":76,"VAR_CTE_STACK":77,"VAR_CTE":78,"cte_float":79,"cte_char":80,"EQUALSSIGN":81,"equals":82,"return":83,"read":84,"LECTURA_AUX":85,"write":86,"ESCRITURA_AUX":87,"ESCRITURA_AUX2":88,"letrero":89,"if":90,"DECISION_IF_AUX":91,"then":92,"DECISION_IF_AUX2":93,"else":94,"while":95,"do":96,"for":97,"to":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"program",7:"id",8:"semicolon",14:"main",15:"lparen",16:"rparen",18:"var",23:"comma",24:"int",25:"float",26:"char",27:"lsqbracket",28:"cte_int",29:"rsqbracket",37:"module",40:"void",42:"lbracket",44:"rbracket",55:"lessthan",56:"greaterthan",57:"isDifferent",58:"isEqual",59:"and",60:"or",61:"lessthanEqual",62:"greaterthanEqual",66:"plus",67:"minus",71:"times",72:"divide",79:"cte_float",80:"cte_char",82:"equals",83:"return",84:"read",86:"write",89:"letrero",90:"if",92:"then",94:"else",95:"while",96:"do",97:"for",98:"to"},
productions_: [0,[3,2],[4,6],[9,1],[9,0],[10,2],[10,0],[11,4],[12,2],[19,5],[19,0],[22,3],[22,0],[20,1],[20,1],[20,1],[21,1],[21,5],[30,3],[30,0],[31,1],[31,5],[31,4],[31,3],[34,2],[36,3],[36,0],[33,3],[33,0],[13,9],[38,1],[38,1],[39,3],[39,0],[41,4],[41,0],[17,3],[43,2],[43,0],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,2],[45,2],[35,2],[53,3],[53,0],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[32,2],[64,2],[64,0],[65,1],[65,1],[63,2],[69,2],[69,0],[70,1],[70,1],[68,1],[68,1],[73,3],[75,1],[74,2],[77,1],[76,1],[76,1],[76,0],[78,1],[78,1],[78,1],[78,1],[46,4],[81,1],[52,5],[47,6],[85,3],[85,0],[48,6],[87,1],[87,1],[88,3],[88,0],[49,8],[91,0],[91,0],[93,2],[93,0],[50,6],[51,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 51:

        pushOperator("lessthan");
        this.$ = "lessthan";
    
break;
case 52:

        pushOperator("greaterthan");
        this.$ = "greaterthan";
    
break;
case 53:

        pushOperator("isDifferent");
        this.$ = "isDifferent";
    
break;
case 54:

        pushOperator("isEqual");
        this.$ = "isEqual";
    
break;
case 55:

        pushOperator("and");
        this.$ = "and";
    
break;
case 56:

        pushOperator("or");
        this.$ = "or";
    
break;
case 57:

        pushOperator("lessthanEqual");
        this.$ = "lessthanEqual";
    
break;
case 58:

        pushOperator("greaterthanEqual");
        this.$ = "greaterthanEqual";
    
break;
case 62:

        pushOperator("plus");
        this.$ = "plus";
    
break;
case 63:

        pushOperator("minus");
        this.$ = "minus";
    
break;
case 67:

        pushOperator("times");
        this.$ = "times";
    
break;
case 68:

        pushOperator("divide");
        this.$ = "divide";
    
break;
case 72:

        pushOperator("lparen");
    
break;
case 74:

        pushOperand($$[$0].dir);
    
break;
case 83:

        pushOperator("equals");
        this.$ = "equals";
    
break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},{7:[1,5]},{1:[2,1]},{8:[1,6]},o($V0,[2,4],{9:7,12:8,18:$V1}),{10:10,13:11,14:$V2,37:$V3},o($V0,[2,3]),o($V4,$V5,{19:13,20:14,24:$V6,25:$V7,26:$V8}),{11:18,14:[1,19]},{10:20,13:11,14:$V2,37:$V3},{20:23,24:$V6,25:$V7,26:$V8,38:21,40:[1,22]},o($V4,[2,8]),{7:$V9,21:24},{7:[2,13]},{7:[2,14]},{7:[2,15]},{5:[2,2]},{15:[1,26]},{14:[2,5]},{7:[1,27]},{7:[2,30]},{7:[2,31]},{8:$Va,22:28,23:$Vb},o($Vc,[2,16],{27:[1,30]}),{16:[1,31]},{15:[1,32]},{8:[1,33]},{7:$V9,21:34},{28:[1,35]},{17:36,42:$Vd},{16:[2,33],20:39,24:$V6,25:$V7,26:$V8,39:38},o($V4,$V5,{20:14,19:40,24:$V6,25:$V7,26:$V8}),{8:$Va,22:41,23:$Vb},{29:[1,42]},{5:[2,7]},o($Ve,$Vf,{43:43,45:44,46:45,47:46,48:47,49:48,50:49,51:50,52:51,35:52,31:53,32:60,63:62,68:63,73:64,74:65,75:66,76:67,7:$Vg,15:$Vh,66:$Vi,67:$Vj,83:$Vk,84:$Vl,86:$Vm,90:$Vn,95:$Vo,97:$Vp}),{16:[1,71]},{7:$V9,21:72},o($V4,[2,9]),{8:[2,11]},o($Vc,[2,19],{30:73,27:[1,74]}),{44:[1,75]},o($Ve,$Vf,{45:44,46:45,47:46,48:47,49:48,50:49,51:50,52:51,35:52,31:53,32:60,63:62,68:63,73:64,74:65,75:66,76:67,43:76,7:$Vg,15:$Vh,66:$Vi,67:$Vj,83:$Vk,84:$Vl,86:$Vm,90:$Vn,95:$Vo,97:$Vp}),o($Vq,[2,39]),o($Vq,[2,40]),o($Vq,[2,41]),o($Vq,[2,42]),o($Vq,[2,43]),o($Vq,[2,44]),o($Vq,[2,45]),{8:[1,77]},{8:[1,78],81:79,82:[1,80]},{15:[1,81]},{15:[1,82]},{15:[1,83]},{15:[1,84]},{7:[1,85]},{15:[1,86]},o($Vc,$Vr,{53:87,54:88,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz}),o($VA,[2,20],{15:[1,98],27:[1,97]}),o($VB,[2,61],{64:99,65:100,66:[1,101],67:[1,102]}),o($VC,[2,66],{69:103,70:104,71:[1,105],72:[1,106]}),o($VD,[2,69]),o($VD,[2,70]),o($VE,$VF,{32:60,63:62,68:63,73:64,74:65,75:66,76:67,35:107,15:$Vh,66:$Vi,67:$Vj}),{7:$Vg,28:[1,111],31:110,77:108,78:109,79:[1,112],80:[1,113]},o($VG,[2,72]),o($VE,[2,75]),o($VE,[2,76]),{8:[1,114]},{16:$VH,23:$VI,41:115},o($Vc,[2,17]),{28:[1,117]},o([5,7,14,15,28,37,44,66,67,79,80,83,84,86,90,94,95,97],[2,36]),{44:[2,37]},o($Vq,[2,46]),o($Vq,[2,47]),o($VE,$VF,{32:60,63:62,68:63,73:64,74:65,75:66,76:67,35:118,15:$Vh,66:$Vi,67:$Vj}),o($VG,[2,83]),{7:$Vg,31:119},o($VE,$VF,{32:60,63:62,68:63,73:64,74:65,75:66,76:67,87:120,35:121,15:$Vh,66:$Vi,67:$Vj,89:$VJ}),o($VG,[2,94],{91:123}),o($VE,$VF,{32:60,63:62,68:63,73:64,74:65,75:66,76:67,35:124,15:$Vh,66:$Vi,67:$Vj}),{82:[1,125]},o($VE,$VF,{63:62,68:63,73:64,74:65,75:66,76:67,32:126,15:$Vh,66:$Vi,67:$Vj}),o($Vc,[2,48]),o($VE,$VF,{63:62,68:63,73:64,74:65,75:66,76:67,32:127,15:$Vh,66:$Vi,67:$Vj}),o($VG,[2,51]),o($VG,[2,52]),o($VG,[2,53]),o($VG,[2,54]),o($VG,[2,55]),o($VG,[2,56]),o($VG,[2,57]),o($VG,[2,58]),o($VE,$VF,{63:62,68:63,73:64,74:65,75:66,76:67,32:128,15:$Vh,66:$Vi,67:$Vj}),o($VE,$VF,{32:60,63:62,68:63,73:64,74:65,75:66,76:67,34:129,35:131,15:$Vh,16:[1,130],66:$Vi,67:$Vj}),o($VB,[2,59]),o($VE,$VF,{63:62,68:63,73:64,74:65,75:66,76:67,32:132,15:$Vh,66:$Vi,67:$Vj}),o($VG,[2,62]),o($VG,[2,63]),o($VC,[2,64]),o($VE,$VF,{68:63,73:64,74:65,75:66,76:67,63:133,15:$Vh,66:$Vi,67:$Vj}),o($VG,[2,67]),o($VG,[2,68]),{16:[1,134]},o($VD,[2,73]),o($VD,[2,74]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),o($VD,[2,81]),{12:135,18:$V1},{16:[2,32]},{20:136,24:$V6,25:$V7,26:$V8},{29:[1,137]},{8:[1,138]},{16:$VK,23:$VL,85:139},{16:$VM,23:$VN,88:141},o($VO,[2,89]),o($VO,[2,90]),o($VE,$VF,{32:60,63:62,68:63,73:64,74:65,75:66,76:67,35:143,15:$Vh,66:$Vi,67:$Vj}),{16:[1,144]},o($VE,$VF,{63:62,68:63,73:64,74:65,75:66,76:67,32:145,15:$Vh,66:$Vi,67:$Vj}),{16:[1,146]},o($Vc,$Vr,{54:88,53:147,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz}),{29:[1,148]},{16:[1,149]},o($VA,[2,23]),{16:$VP,23:$VQ,36:150},o($VB,[2,60]),o($VC,[2,65]),o($VD,[2,71]),{17:152,42:$Vd},{7:$V9,21:153},o($Vc,[2,18]),o($Vq,[2,82]),{16:[1,154]},{7:$Vg,31:155},{16:[1,156]},o($VE,$VF,{32:60,63:62,68:63,73:64,74:65,75:66,76:67,35:121,87:157,15:$Vh,66:$Vi,67:$Vj,89:$VJ}),{16:[1,158]},{96:[1,159]},{98:[1,160]},{8:[1,161]},o($Vc,[2,49]),o($VA,[2,28],{33:162,27:[1,163]}),o($VA,[2,22]),{16:[2,24]},o($VE,$VF,{32:60,63:62,68:63,73:64,74:65,75:66,76:67,35:164,15:$Vh,66:$Vi,67:$Vj}),o($V0,[2,29]),{16:$VH,23:$VI,41:165},{8:[1,166]},{16:$VK,23:$VL,85:167},{8:[1,168]},{16:$VM,23:$VN,88:169},{92:[1,170]},{17:171,42:$Vd},o($VE,$VF,{63:62,68:63,73:64,74:65,75:66,76:67,32:172,15:$Vh,66:$Vi,67:$Vj}),o($Vq,[2,84]),o($VA,[2,21]),o($VE,$VF,{63:62,68:63,73:64,74:65,75:66,76:67,32:173,15:$Vh,66:$Vi,67:$Vj}),{16:$VP,23:$VQ,36:174},{16:[2,34]},o($Vq,[2,85]),{16:[2,86]},o($Vq,[2,88]),{16:[2,91]},{17:175,42:$Vd},o($Vq,[2,98]),{96:[1,176]},{29:[1,177]},{16:[2,25]},o($Vq,[2,97],{93:178,94:[1,179]}),{17:180,42:$Vd},o($VA,[2,27]),o($Vq,[2,93]),{17:181,42:$Vd},o($Vq,[2,99]),o($Vq,[2,96])],
defaultActions: {4:[2,1],15:[2,13],16:[2,14],17:[2,15],18:[2,2],20:[2,5],22:[2,30],23:[2,31],36:[2,7],41:[2,11],76:[2,37],115:[2,32],150:[2,24],165:[2,34],167:[2,86],169:[2,91],174:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    var semCube = new Map();
    var operatorCategories = new Map();
    var functionDirectory = new Map();

    var stackOperators = [];
	var stackOperands = [];
	var stackJumps = [];

    var quads = [];
    var quadCount = 0;

    //This sets up the elements of the semantic cube by inserting the combinations and their resulting types.
    function fillMaps(){
        semCube.set("int,int,plus", "int");
        semCube.set("int,int,arithmetic", "int");
        semCube.set("int,float,plus", "float");
        semCube.set("int,float,arithmetic", "float");
        semCube.set("int,letrero,plus", "letrero");
        
        semCube.set("float,int,plus", "float");
        semCube.set("float,int,arithmetic", "float");
        semCube.set("float,float,plus", "float");
        semCube.set("float,float,arithmetic", "float");
        semCube.set("float,letrero,plus", "letrero");
        
        semCube.set("char,letrero,plus", "letrero");
        
        semCube.set("letrero,int,plus", "letrero");
        semCube.set("letrero,float,plus", "letrero");
        semCube.set("letrero,char,plus", "letrero");
        semCube.set("letrero,letrero,plus", "letrero");
        
        semCube.set("int,int,equalComp", "bool");
        semCube.set("int,float,equalComp", "bool");
        semCube.set("float,int,equalComp", "bool");
        semCube.set("float,float,equalComp", "bool");
        
        semCube.set("int,int,numericComp", "bool");
        semCube.set("int,float,numericComp", "bool");
        semCube.set("float,int,numericComp", "bool");
        semCube.set("float,float,numericComp", "bool");
        
        semCube.set("char,char,equalComp", "bool");
        semCube.set("char,letrero,equalComp", "bool");
        semCube.set("letrero,letrero,equalComp", "bool");
        semCube.set("letrero,char,equalComp", "bool");
        
        operatorCategories.set('+', "plus");
        operatorCategories.set('-', "arithmetic");
        operatorCategories.set('*', "arithmetic");
        operatorCategories.set('/', "arithmetic");
        operatorCategories.set('==', "equalComp");
        operatorCategories.set('!=', "equalComp");
        operatorCategories.set('<', "numericComp");
        operatorCategories.set('<=', "numericComp");
        operatorCategories.set('>', "numericComp");
        operatorCategories.set('>=', "numericComp");
    }

    fillMaps();

    // returns the resulting type of an operation
    function semanticCube(operand1, operand2, operator){
        var opCategory = operatorCategories.get(operator);
        var result = semCube.get(operand1 + "," + operand2 + "," + opCategory);
        //if result == undefined, return Error
        return result;
    }

    // adds a function to the function directory
    function createFunction(id, funcType) {
        if (!functionDirectory.has(id)) {
            functionDirectory.set(id, {type: funcType, varTable: new Map()});
        }
        else {
            // error, re-declaration of function
        }
    }

    // adds a variable to the variable table of a function in the directory
    function createVariable(id, funcId, varType, varValue) {
        var varTable = functionDirectory.get(funcId).varTable;
        if (!varTable.has(id)) {
            varTable.set(id, {type: varType, value: varValue});
        }
        else {
            // error, re-declaration of variable
        }
    }

    function addQuad(operator, dir1, dir2, dir3){
        quads.push({operator: operator, dir1: dir1, dir2: dir2, dir3: dir3});
        count++;
    }

    function pushOperator(operator){
        stackOperators.push(operator);
    }

    function pushOperand(operand){
        stackOperands.push(operand);
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 18
break;
case 2:return 24
break;
case 3:return 25
break;
case 4:return 26
break;
case 5:return 40
break;
case 6:return 6
break;
case 7:return 14
break;
case 8:return 37
break;
case 9:return 90
break;
case 10:return 92
break;
case 11:return 94
break;
case 12:return 83
break;
case 13:return 86
break;
case 14:return 84
break;
case 15:return 95
break;
case 16:return 97
break;
case 17:return 98
break;
case 18:return 96
break;
case 19:return 58
break;
case 20:return 82
break;
case 21:return 'colon'
break;
case 22:return 8
break;
case 23:return 23
break;
case 24:return 42
break;
case 25:return 44
break;
case 26:return 27
break;
case 27:return 29
break;
case 28:return 15
break;
case 29:return 16
break;
case 30:return 66
break;
case 31:return 66
break;
case 32:return 67
break;
case 33:return 71
break;
case 34:return 72
break;
case 35:return 61
break;
case 36:return 62
break;
case 37:return 55
break;
case 38:return 56
break;
case 39:return 57
break;
case 40:return 'inverse'
break;
case 41:return 59
break;
case 42:return 60
break;
case 43:return 7
break;
case 44:return 28
break;
case 45:return 79
break;
case 46:return 80
break;
case 47:return 89
break;
case 48:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:void\b)/,/^(?:program\b)/,/^(?:main\b)/,/^(?:module\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:write\b)/,/^(?:read\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:to\b)/,/^(?:do\b)/,/^(?:==)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/,/^(?:\d+)/,/^(?:\d+\.\d+)/,/^(?:'.')/,/^(?:".*")/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = progriscript_jison;
exports.Parser = progriscript_jison.Parser;
exports.parse = function () { return progriscript_jison.parse.apply(progriscript_jison, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}