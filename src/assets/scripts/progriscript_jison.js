/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var progriscript_jison = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[17,41],$V1=[1,10],$V2=[2,7],$V3=[1,13],$V4=[17,41,50],$V5=[2,12],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,28],$Va=[1,30],$Vb=[2,14],$Vc=[1,35],$Vd=[7,19,25],$Ve=[12,18,30,52,79,80,93,94,97,98,101,106,114,115],$Vf=[1,63],$Vg=[1,77],$Vh=[1,78],$Vi=[1,81],$Vj=[1,82],$Vk=[1,79],$Vl=[1,80],$Vm=[2,92],$Vn=[1,94],$Vo=[2,58],$Vp=[1,101],$Vq=[1,102],$Vr=[1,103],$Vs=[7,19,25,31,63,65,66,70,71,72,73,74,75,79,80,85,86,96,113,118],$Vt=[2,25],$Vu=[7,19,25,63,65,66],$Vv=[7,19,25,31,63,65,66,70,71,72,73,74,75,113,118],$Vw=[7,19,25,31,63,65,66,70,71,72,73,74,75,79,80,113,118],$Vx=[7,19,25,31,63,65,66,70,71,72,73,74,75,79,80,85,86,113,118],$Vy=[12,18,30,79,80,93,94],$Vz=[12,30,93,94],$VA=[2,44],$VB=[1,127],$VC=[1,136],$VD=[2,101],$VE=[1,157],$VF=[19,25],$VG=[2,108],$VH=[1,159],$VI=[2,30],$VJ=[1,170];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"EXPRESSIONS":3,"PROGRAM":4,"EOF":5,"PROGRAM_NAME":6,"semicolon":7,"PROGRAM_AUX":8,"PROGRAM_AUX2":9,"MAIN":10,"program":11,"id":12,"VARS":13,"FUNCION":14,"MAIN_WRAPPER":15,"BLOQUE":16,"main":17,"lparen":18,"rparen":19,"var":20,"VARS_AUX":21,"TIPO":22,"ID_DECLARE_VAR":23,"VARS_AUX2":24,"comma":25,"int":26,"float":27,"char":28,"lsqbracket":29,"cte_int":30,"rsqbracket":31,"ID_DECLARE_VAR_AUX":32,"ID_ACCESS_VAR":33,"ID_SIMPLE_VAR":34,"EXP":35,"ID_ACCESS_VAR_AUX":36,"PARAMS_LLAMADA_FUNCION":37,"ID_LLAMADA_FUNCION":38,"EXPRESION":39,"PARAMS_LLAMADA_FUNCION_AUX":40,"module":41,"FUNCION_ID_WRAPPER":42,"FUNCION_PARAM_LIST":43,"VARS_FUNC":44,"FUNCION_TIPO":45,"VARS_FUNC_AUX":46,"void":47,"FUNCION_PARAM_LIST_AUX":48,"VAR_FUNC_PARAM":49,"lbracket":50,"BLOQUE_AUX":51,"rbracket":52,"ESTATUTO":53,"ASIGNACION":54,"LECTURA":55,"ESCRITURA":56,"DECISION_IF":57,"CONDICIONAL_WHILE":58,"NO_CONDICIONAL_FOR":59,"RETORNO_FUNCION":60,"EXP_COMP_WRAPPER":61,"EXPRESION_AUX":62,"EXPRESION_AUX2":63,"EXP_COMP":64,"and":65,"or":66,"EXP_WRAPPER":67,"EXP_COMP_AUX":68,"EXP_COMP_AUX2":69,"lessthan":70,"greaterthan":71,"isDifferent":72,"isEqual":73,"lessthanEqual":74,"greaterthanEqual":75,"TERMINO_WRAPPER":76,"EXP_AUX":77,"EXP_AUX2":78,"plus":79,"minus":80,"TERMINO":81,"FACTOR_WRAPPER":82,"TERMINO_AUX":83,"TERMINO_AUX2":84,"times":85,"divide":86,"FACTOR":87,"FACTOR_AUX":88,"FACTOR_AUX2":89,"BEGINPAREN":90,"VAR_CTE":91,"FACTOR_AUX3":92,"cte_float":93,"cte_char":94,"EQUALSSIGN":95,"equals":96,"return":97,"read":98,"ID_ACCESS_VAR_LECTURA":99,"LECTURA_AUX":100,"write":101,"ESCRITURA_AUX_WRAPPER":102,"ESCRITURA_AUX2":103,"ESCRITURA_AUX":104,"letrero":105,"if":106,"EXPRESION_IF":107,"then":108,"DECISION_IF_AUX":109,"ELSE_START":110,"else":111,"WHILE_START":112,"do":113,"while":114,"for":115,"ID_WRAPPER":116,"FOR_EXP1":117,"to":118,"FOR_EXP2":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"semicolon",11:"program",12:"id",17:"main",18:"lparen",19:"rparen",20:"var",25:"comma",26:"int",27:"float",28:"char",29:"lsqbracket",30:"cte_int",31:"rsqbracket",41:"module",47:"void",50:"lbracket",52:"rbracket",63:"EXPRESION_AUX2",65:"and",66:"or",70:"lessthan",71:"greaterthan",72:"isDifferent",73:"isEqual",74:"lessthanEqual",75:"greaterthanEqual",79:"plus",80:"minus",85:"times",86:"divide",93:"cte_float",94:"cte_char",96:"equals",97:"return",98:"read",101:"write",105:"letrero",106:"if",108:"then",111:"else",113:"do",114:"while",115:"for",118:"to"},
productions_: [0,[3,2],[4,5],[6,2],[8,1],[8,0],[9,2],[9,0],[10,2],[15,3],[13,2],[21,5],[21,0],[24,3],[24,0],[22,1],[22,1],[22,1],[23,1],[23,5],[32,3],[32,0],[33,1],[33,5],[33,4],[34,1],[38,1],[37,2],[37,0],[40,3],[40,0],[36,3],[36,0],[14,8],[42,2],[44,1],[46,1],[46,0],[45,1],[45,1],[43,3],[43,0],[49,2],[48,4],[48,0],[16,3],[51,2],[51,0],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,2],[39,2],[62,3],[62,0],[62,1],[62,1],[61,1],[64,2],[68,2],[68,0],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[67,1],[35,2],[77,2],[77,0],[78,1],[78,1],[76,1],[81,2],[83,2],[83,0],[84,1],[84,1],[82,1],[87,1],[87,1],[88,3],[90,1],[89,1],[89,2],[92,1],[92,1],[91,1],[91,1],[91,1],[91,1],[54,4],[95,1],[60,5],[55,6],[100,3],[100,0],[99,1],[56,6],[102,1],[104,1],[104,1],[103,3],[103,0],[57,5],[107,3],[109,2],[109,0],[110,1],[58,4],[112,1],[59,8],[116,1],[117,1],[119,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        // TODO: return quads, funcs, constants for VM
        pushQuad("end", null, null, null);

        console.log("quads:");
        console.log(quads);

        var returnObj = {
            quads: quads,
            funcs: functionDirectory,
            const: constTable
        };

        //console.log("constants:");
        //printMap(constTable);

        //console.log("functions:");
        //printMap(functionDirectory);

        resetVariables();

        return returnObj;
    
break;
case 3:

        pushQuad("goto", null, null, null);
        stackJumps.push(quadCount - 1);

        programName = $$[$0];
        //currentFunctionId = programName;
        createFunction(programName, "program");
        calledFuncs.push(programName);
    
break;
case 9:

        var posGotoMain = stackJumps.pop();
        fillQuad(posGotoMain);
    
break;
case 15:

        currentType = "int";
    
break;
case 16:

        currentType = "float";
    
break;
case 17:

        currentType = "char";
    
break;
case 18:

        this.$ = createVariable($$[$0]);
    
break;
case 25:

        if (variableExists($$[$0])) {
            var dir = functionDirectory.get(currentFunctionId).varTable.get($$[$0]).dir;
            pushOperand(dir);
            this.$ = {name: $$[$0], dir: dir};
        }
        else {
            // error, variable is not declared (does not exist)
            flagError(ERROR_UNKNOWN_VARIABLE);
        }
    
break;
case 26:

        // Verify that the function id exists in the functionDirectory
        if (!functionDirectory.has($$[$0])) {
            flagError(ERROR_UNKNOWN_VARIABLE);
        }

        var size = functionDirectory.get($$[$0]).varTable.keys().length + functionDirectory.get($$[$0]).tempVarsUsed;
        pushQuad("era", size, null, null);
    
break;
case 33:

        // punto 7
        // check if non-void function has a return statement
        if (functionDirectory.get(currentFunctionId).type != "void" && !functionDirectory.get(currentFunctionId).foundReturnStatement) {
            // ERROR: no return statement in non-void function
            flagError(ERROR_NO_RETURN_STATEMENT);
        }

        // save number of temporal variables used
        var numberTemporalVarsUsed = 0;
        for (var i = 6; i <= 9; i++) {
            numberTemporalVarsUsed += counters[i] - functionDirectory.get(currentFunctionId).initialCounters[i];
        } 
        functionDirectory.get(currentFunctionId).tempVarsUsed = numberTemporalVarsUsed;

        // release dirs for local variables, temps and consts
        counters = functionDirectory.get(currentFunctionId).initialCounters;
        pushQuad("endFunc", null, null, null);

        // change currentFunctionId back to the previous function
        calledFuncs.pop();
        currentFunctionId = top(calledFuncs);
    
break;
case 34:

        createFunction($$[$0], $$[$0-1]);
        calledFuncs.push($$[$0]);
    
break;
case 35:

        // el punto 5 es mamada
        // punto 6
        functionDirectory.get(currentFunctionId).quadCounter = quadCount;
    
break;
case 42:

        // pushear a params de la funcion el tipo
        functionDirectory.get(currentFunctionId).params.push($$[$0-1]);
    
break;
case 59:

        pushOperator("and");
        this.$ = "and";
    
break;
case 60:

        pushOperator("or");
        this.$ = "or";
    
break;
case 61:

        if (top(stackOperators) == "and" || top(stackOperators) == "or") {
            addQuad();
        }
    
break;
case 65:

        pushOperator("lessthan");
        this.$ = "lessthan";
    
break;
case 66:

        pushOperator("greaterthan");
        this.$ = "greaterthan";
    
break;
case 67:

        pushOperator("isDifferent");
        this.$ = "isDifferent";
    
break;
case 68:

        pushOperator("isEqual");
        this.$ = "isEqual";
    
break;
case 69:

        pushOperator("lessthanEqual");
        this.$ = "lessthanEqual";
    
break;
case 70:

        pushOperator("greaterthanEqual");
        this.$ = "greaterthanEqual";
    
break;
case 71:

        if (top(stackOperators) == "lessthan" || top(stackOperators) == "greaterthan"
            || top(stackOperators) == "isDifferent" || top(stackOperators) == "isEqual"
            || top(stackOperators) == "lessthanEqual" || top(stackOperators) == "greaterthanEqual") {
                addQuad();
        }
    
break;
case 75:

        pushOperator("plus");
        this.$ = "plus";
    
break;
case 76:

        pushOperator("minus");
        this.$ = "minus";
    
break;
case 77:

        if (top(stackOperators) == "plus" || top(stackOperators) == "minus") {
            addQuad();
        }
    
break;
case 81:

        pushOperator("times");
        this.$ = "times";
    
break;
case 82:

        pushOperator("divide");
        this.$ = "divide";
    
break;
case 83:

        if (stackOperators[stackOperators.length - 1] == "times" || stackOperators[stackOperators.length - 1] == "divide") {
            addQuad();
        }
    
break;
case 87:

        pushOperator("lparen");
    
break;
case 88: case 92:

        this.$ = $$[$0];
    
break;
case 89:


        var operandDir = $$[$0].dir;
        var resultDir = operandDir;
        
        // check varType of operand  
        operandVarType = getTypeFromDir($$[$0].dir);  

        // if operand type is not int or float, error  
        if (operandVarType != "int" && operandVarType != "float") {
            // error
            flagError(ERROR_ARITHMETIC_NON_NUMBER);
        }

        // case for unary minus operator
        if ($$[$0-1] == "minus") {
            // add -1 to constTable
            minusOneDir = addConstant(-1, operandVarType);

            // push operator and operands to stack
            pushOperator("times");
            pushOperand(minusOneDir);
            pushOperand(operandDir);
            
            // addQuad for -1 * operand received
            addQuad();
            
        }
        
        return resultDir;
    
break;
case 91:

        // TODO: check errors when VAR_CTE is not a number or a variable
        this.$ = "minus";
    
break;
case 93:

        var val = Number($$[$0]);
        var resultDir = addConstant(val, CONST_INT);
        pushOperand(resultDir);
        this.$ = {dir: resultDir};
    
break;
case 94:

        var val = Number($$[$0]);
        var resultDir = addConstant(val, CONST_FLOAT);
        pushOperand(resultDir);
        this.$ = {dir: resultDir};
    
break;
case 95:

        var resultDir = addConstant($$[$0], CONST_CHAR);
        pushOperand(resultDir);
        this.$ = {dir: resultDir};
    
break;
case 96:

        //printStacks();
        // pops
        var dirRight = stackOperands.pop();
        var dirLeft = stackOperands.pop();
        var operator = stackOperators.pop();
        
        // checar si el tipo de el temp es el mismo (o compatible) que el de la variable
        if (semanticCube(dirLeft, dirRight, "equals") == undefined) {
            // TODO: Error type mismatch
            flagError(ERROR_TYPE_MISMATCH);
        }

        // push new quad
        pushQuad(operator, dirRight, dirLeft, null);
    
break;
case 97:

        pushOperator("equals");
        this.$ = "equals";
    
break;
case 98:

        functionDirectory.get(currentFunctionId).foundReturnStatement = true;
        //guardar resultado de exp, y luego la parte que mando a llamar esta funcion se hace un cuadruplo de asignacion con esa direccion
    
break;
case 102:

        // pop operand
        var dirOperand = stackOperands.pop();

        // push write quad with dir for each argument
        pushQuad("read", dirOperand, null, null);
    
break;
case 104:

        // pop operand
        var dirOperand = stackOperands.pop();

        // push write quad with dir for each argument
        pushQuad("write", dirOperand, null, null);
    
break;
case 106:

        var resultDir = addConstant($$[$0], CONST_LETRERO);
        pushOperand(resultDir);
        this.$ = {dir: resultDir};
    
break;
case 109:

        var end = stackJumps.pop();
        //end es el num del quad que vamos a rellenar
        //quadcount es hacia donde va saltar (lo que va rellenar en el quad)
        fillQuad(end);
        //quads[end].dir2 = quadCount;
        //end = pjumps.pop;
        //fill(end, quadcount);
    
break;
case 110:

        // check que expresion sea bool
        var dirExpressionIf = stackOperands.pop();
        if(getTypeFromDir(dirExpressionIf) == "bool"){
            //console.log("found bool");
            
            // dir2 of the gotof quad is the quad we will goto, will be filled later
            pushQuad("gotof", dirExpressionIf, null, null);
            //cuando llegas al else o al final del if, llamamos una funcion que hace pop del stackjumps y lo llena, usando la posicion de quadcount - 1
            // push quadCount of the gotof quad 
            stackJumps.push(quadCount - 1);
        }
        else {
            // error, TYPE_MISMATCH
            flagError(ERROR_TYPE_MISMATCH);
        }
    
break;
case 113:

        pushQuad("goto", null, null, null);
        var posGotoF = stackJumps.pop();
        stackJumps.push(quadCount - 1);
        fillQuad(posGotoF);
    
break;
case 114:

        var endJump = stackJumps.pop();
        var returnJump = stackJumps.pop();
        pushQuad("goto", returnJump, null, null);
        fillQuad(endJump);
    
break;
case 115:

        stackJumps.push(quadCount);
    
break;
case 116:

        // get for control variable
        var vControl = top(forVars).vControl;

        pushQuad("plus", vControl, addConstant(1, CONST_INT), vControl);
        var quadGotoFFor = stackJumps.pop();
        var quadComparisonFor = stackJumps.pop();

        pushQuad("goto", quadComparisonFor, null, null);
        quads[quadGotoFFor].dir2 = quadCount;

        // pop control variable from array of control variables
        forVars.pop();
    
break;
case 117:

        if (getTypeFromDir($$[$0].dir) != "int" && getTypeFromDir($$[$0].dir) != "float") {
            // error: type mismatch
            flagError(ERROR_TYPE_MISMATCH);
        }
    
break;
case 118:

        var exp = stackOperands.pop();
        if (getTypeFromDir(exp) != "int" && getTypeFromDir(exp) != "float") {
            // error: type mismatch
            flagError(ERROR_TYPE_MISMATCH);
        }
        else {
            // pop control variable from operand stack and save it internally
            var vControl = stackOperands.pop();
            forVars.push({vControl: vControl, vFinal: null});

            // check that control variable and exp are of compatible data types
            var resultType = semanticCube(vControl, exp, "equals");
            if (resultType == undefined) {
                // error TYPE_MISMATCH
                flagError(ERROR_TYPE_MISMATCH);
            }
            pushQuad("equals", exp, vControl, null);
        }
    
break;
case 119:

        var exp = stackOperands.pop();
        if (getTypeFromDir(exp) != "int" && getTypeFromDir(exp) != "float") {
            // error: type mismatch
            flagError(ERROR_TYPE_MISMATCH);
        }
        else {
            var vControl = top(forVars).vControl;

            // use semantic cube to generate the direction for the temporary var
            var resultType = semanticCube(vControl, exp, "lessthan");
            if (resultType == undefined) {
                // error TYPE_MISMATCH
                flagError(ERROR_TYPE_MISMATCH);
            }
            var dirTemp = generateDir(startingDirCodes.get("temp," + resultType));

            // quad for comparison in for loop
            pushQuad("lessthan", vControl, exp, dirTemp);

            stackJumps.push(quadCount - 1);
            pushQuad("gotoF", dirTemp, null, null);
            stackJumps.push(quadCount - 1);
        }
    
break;
}
},
table: [{3:1,4:2,6:3,11:[1,4]},{1:[3]},{5:[1,5]},{7:[1,6]},{12:[1,7]},{1:[2,1]},o($V0,[2,5],{8:8,13:9,20:$V1}),{7:[2,3]},{9:11,14:12,17:$V2,41:$V3},o($V0,[2,4]),o($V4,$V5,{21:14,22:15,26:$V6,27:$V7,28:$V8}),{10:19,15:20,17:[1,21]},{9:22,14:12,17:$V2,41:$V3},{22:26,26:$V6,27:$V7,28:$V8,42:23,45:24,47:[1,25]},o($V4,[2,10]),{12:$V9,23:27},{12:[2,15]},{12:[2,16]},{12:[2,17]},{5:[2,2]},{16:29,50:$Va},{18:[1,31]},{17:[2,6]},{18:[1,32]},{12:[1,33]},{12:[2,38]},{12:[2,39]},{7:$Vb,24:34,25:$Vc},o($Vd,[2,18],{29:[1,36]}),{5:[2,8]},o($Ve,[2,47],{51:37}),{19:[1,38]},{19:[2,41],22:40,26:$V6,27:$V7,28:$V8,43:39},{18:[2,34]},{7:[1,41]},{12:$V9,23:42},{30:[1,43]},{12:$Vf,18:$Vg,30:$Vh,33:54,34:62,35:67,39:53,52:[1,44],53:45,54:46,55:47,56:48,57:49,58:50,59:51,60:52,61:61,64:65,67:66,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl,97:[1,60],98:[1,55],101:[1,56],106:[1,57],112:58,114:[1,64],115:[1,59]},{50:[2,9]},{19:[1,83]},{12:$V9,23:84},o($V4,$V5,{22:15,21:85,26:$V6,27:$V7,28:$V8}),{7:$Vb,24:86,25:$Vc},{31:[1,87]},o([5,12,17,18,30,41,52,79,80,93,94,97,98,101,106,111,114,115],[2,45]),o($Ve,[2,46]),o($Ve,[2,48]),o($Ve,[2,49]),o($Ve,[2,50]),o($Ve,[2,51]),o($Ve,[2,52]),o($Ve,[2,53]),o($Ve,[2,54]),{7:[1,88]},o([7,63,65,66,70,71,72,73,74,75,79,80,85,86],$Vm,{95:89,96:[1,90]}),{18:[1,91]},{18:[1,92]},{18:$Vn,107:93},{18:$Vn,107:95},{12:[1,98],34:97,116:96},{18:[1,99]},o($Vd,$Vo,{62:100,63:$Vp,65:$Vq,66:$Vr}),o($Vs,[2,22]),o($Vs,$Vt,{18:[1,105],29:[1,104]}),{18:[2,115]},o($Vu,[2,61]),o($Vu,[2,64],{68:106,69:107,70:[1,108],71:[1,109],72:[1,110],73:[1,111],74:[1,112],75:[1,113]}),o([7,19,25,63,65,66,70,71,72,73,74,75],[2,71]),o($Vv,[2,74],{77:114,78:115,79:[1,116],80:[1,117]}),o($Vw,[2,77]),o($Vw,[2,80],{83:118,84:119,85:[1,120],86:[1,121]}),o($Vx,[2,83]),o($Vx,[2,84]),o($Vx,[2,85]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:67,39:122,61:61,64:65,67:66,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},o($Vx,[2,88]),{12:$Vf,30:$Vh,33:123,34:62,91:124,93:$Vk,94:$Vl},o($Vy,[2,87]),o($Vx,[2,93]),o($Vx,[2,94]),o($Vx,[2,95]),o($Vz,[2,90]),o($Vz,[2,91]),{7:[1,125]},{19:$VA,25:$VB,48:126},o($V4,[2,11]),{7:[2,13]},o($Vd,[2,21],{32:128,29:[1,129]}),o($Ve,[2,55]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:67,39:130,61:61,64:65,67:66,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},o($Vy,[2,97]),{12:$Vf,33:132,34:62,99:131},{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:67,39:135,61:61,64:65,67:66,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl,102:133,104:134,105:$VC},{108:[1,137]},{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:67,39:138,61:61,64:65,67:66,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},{113:[1,139]},{96:[1,140]},{96:[2,117]},{96:$Vt},{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:141,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},o($Vd,[2,56]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:67,64:142,67:66,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},o($Vd,[2,59]),o($Vd,[2,60]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:143,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},{12:$Vf,18:$Vg,19:[2,28],30:$Vh,33:123,34:62,35:67,37:144,39:145,61:61,64:65,67:66,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},o($Vu,[2,62]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:67,64:146,67:66,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},o($Vy,[2,65]),o($Vy,[2,66]),o($Vy,[2,67]),o($Vy,[2,68]),o($Vy,[2,69]),o($Vy,[2,70]),o($Vv,[2,72]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:147,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},o($Vy,[2,75]),o($Vy,[2,76]),o($Vw,[2,78]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,79:$Vi,80:$Vj,81:148,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},o($Vy,[2,81]),o($Vy,[2,82]),{19:[1,149]},o($Vx,$Vm),o($Vx,[2,89]),{13:152,20:$V1,44:150,46:151,50:[2,37]},{19:[2,40]},{22:153,26:$V6,27:$V7,28:$V8},o($Vd,[2,19]),{30:[1,154]},{7:[1,155]},{19:$VD,25:$VE,100:156},o($VF,[2,102]),{19:$VG,25:$VH,103:158},o($VF,[2,104]),o($VF,[2,105]),o($VF,[2,106]),{16:160,50:$Va},{19:[1,161]},{16:162,50:$Va},{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:164,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl,117:163},{19:[1,165]},o($Vd,$Vo,{62:166,63:$Vp,65:$Vq,66:$Vr}),{31:[1,167]},{19:[1,168]},{19:$VI,25:$VJ,40:169},o($Vu,[2,63]),o($Vv,[2,73]),o($Vw,[2,79]),o($Vx,[2,86]),{16:171,50:$Va},{50:[2,35]},{50:[2,36]},{12:$V9,23:172},{31:[1,173]},o($Ve,[2,96]),{19:[1,174]},{12:$Vf,33:132,34:62,99:175},{19:[1,176]},{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:67,39:135,61:61,64:65,67:66,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl,102:177,104:134,105:$VC},o($Ve,[2,112],{109:178,110:179,111:[1,180]}),o([108,113],[2,110]),o($Ve,[2,114]),{118:[1,181]},{118:[2,118]},{7:[1,182]},o($Vd,[2,57]),o($Vs,[2,32],{36:183,29:[1,184]}),o($Vs,[2,24]),{19:[2,27]},{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:67,39:185,61:61,64:65,67:66,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},o($V0,[2,33]),{19:$VA,25:$VB,48:186},o($Vd,[2,20]),{7:[1,187]},{19:$VD,25:$VE,100:188},{7:[1,189]},{19:$VG,25:$VH,103:190},o($Ve,[2,109]),{16:191,50:$Va},{50:[2,113]},{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:193,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl,119:192},o($Ve,[2,98]),o($Vs,[2,23]),{12:$Vf,18:$Vg,30:$Vh,33:123,34:62,35:194,76:68,79:$Vi,80:$Vj,81:69,82:70,87:71,88:72,89:73,90:74,91:75,92:76,93:$Vk,94:$Vl},{19:$VI,25:$VJ,40:195},{19:[2,43]},o($Ve,[2,99]),{19:[2,100]},o($Ve,[2,103]),{19:[2,107]},o($Ve,[2,111]),{113:[1,196]},{113:[2,119]},{31:[1,197]},{19:[2,29]},{16:198,50:$Va},o($Vs,[2,31]),o($Ve,[2,116])],
defaultActions: {5:[2,1],7:[2,3],16:[2,15],17:[2,16],18:[2,17],19:[2,2],22:[2,6],25:[2,38],26:[2,39],29:[2,8],33:[2,34],38:[2,9],64:[2,115],86:[2,13],97:[2,117],98:[2,25],126:[2,40],151:[2,35],152:[2,36],164:[2,118],169:[2,27],180:[2,113],186:[2,43],188:[2,100],190:[2,107],193:[2,119],195:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    // Maps declarations
    var semCube = new Map();
    var functionDirectory = new Map();
    var constTable = new Map();
    var startingDirCodes = new Map();

    var stackOperators = [];
	var stackOperands = [];
	var stackJumps = [];

    var quads = [];
    var quadCount = 0;

    // variables to know current state
    var programName = "";
    var currentFunctionId = "";
    var currentType = "";

    // 14 counters for each dir section, position for each counter is StartingDir/10000
    var counters = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

    // Starting dirs for each type and scope
    const GLOBAL_INT = 0;
    const GLOBAL_FLOAT = 10000;
    const GLOBAL_CHAR = 20000;
    const LOCAL_INT = 30000;
    const LOCAL_FLOAT = 40000;
    const LOCAL_CHAR = 50000;
    const TEMP_INT = 60000;
    const TEMP_FLOAT = 70000;
    const TEMP_CHAR = 80000;
    const TEMP_BOOL = 90000;
    const CONST_INT = 100000;
    const CONST_FLOAT = 110000;
    const CONST_CHAR = 120000;
    const CONST_LETRERO = 130000;

    // Error codes
    const ERROR_TYPE_MISMATCH = 1;
    const ERROR_VAR_REDECLATION = 2;
    const ERROR_FUNC_REDECLARATION = 3;
    const ERROR_UNKNOWN_VARIABLE = 4;
    const ERROR_NO_RETURN_STATEMENT = 5;
    const ERROR_ARITHMETIC_NON_NUMBER = 6;

    // Func
    function flagError(errorCode){
        var message = "";
        switch (errorCode) {
            case ERROR_TYPE_MISMATCH:
                message = "Type Mismatch";
                break;
            case ERROR_VAR_REDECLATION:
                message = "Variable Redeclaration";
                break;
            case ERROR_FUNC_REDECLARATION:
                message = "Function Redeclaration";
                break;
            case ERROR_UNKNOWN_VARIABLE:
                message = "Unknown Variable";
                break;
            case ERROR_NO_RETURN_STATEMENT:
                message = "No return statement";
                break;
            case ERROR_ARITHMETIC_NON_NUMBER:
                message = "Arithmetic operation with non-numbers";
                break;
        }

        // TO-DO: change to "Compilation error on line x:"
        throw new Error("Compilation error: " + message);
    }

    // for variables lists
    var forVars = [];

    // for function calls
    var calledFuncs = [];

    // This sets up the elements of the semantic cube by inserting the combinations and their resulting types.
    // Also initializes values for startingDirCodes map
    function fillMaps(){
        semCube.set("int,int,plus", "int");
        semCube.set("int,int,minus", "int");
        semCube.set("int,int,times", "int");
        semCube.set("int,int,divide", "int");
        semCube.set("int,float,plus", "float");
        semCube.set("int,float,minus", "float");
        semCube.set("int,float,times", "float");
        semCube.set("int,float,divide", "float");
        semCube.set("int,letrero,plus", "letrero");
        
        semCube.set("float,int,plus", "float");
        semCube.set("float,int,minus", "float");
        semCube.set("float,int,times", "float");
        semCube.set("float,int,divide", "float");
        semCube.set("float,float,plus", "float");
        semCube.set("float,float,minus", "float");
        semCube.set("float,float,times", "float");
        semCube.set("float,float,divide", "float");
        semCube.set("float,letrero,plus", "letrero");
        
        semCube.set("char,letrero,plus", "letrero");
        
        semCube.set("letrero,int,plus", "letrero");
        semCube.set("letrero,float,plus", "letrero");
        semCube.set("letrero,char,plus", "letrero");
        semCube.set("letrero,letrero,plus", "letrero");
        
        // int/float equal comparisons
        semCube.set("int,int,isEqual", "bool");
        semCube.set("int,int,isDifferent", "bool");
        semCube.set("int,float,isEqual", "bool");
        semCube.set("int,float,isDifferent", "bool");
        semCube.set("float,int,isEqual", "bool");
        semCube.set("float,int,isDifferent", "bool");
        semCube.set("float,float,isEqual", "bool");
        semCube.set("float,float,isDifferent", "bool");

        // int/float numeric comparisons        
        semCube.set("int,int,lessthan", "bool");
        semCube.set("int,int,greaterthan", "bool");
        semCube.set("int,int,lessthanEqual", "bool");
        semCube.set("int,int,greaterthanEqual", "bool");
        semCube.set("int,float,lessthan", "bool");
        semCube.set("int,float,greaterthan", "bool");
        semCube.set("int,float,lessthanEqual", "bool");
        semCube.set("int,float,greaterthanEqual", "bool");
        semCube.set("float,int,lessthan", "bool");
        semCube.set("float,int,greaterthan", "bool");
        semCube.set("float,int,lessthanEqual", "bool");
        semCube.set("float,int,greaterthanEqual", "bool");
        semCube.set("float,float,lessthan", "bool");
        semCube.set("float,float,greaterthan", "bool");
        semCube.set("float,float,lessthanEqual", "bool");
        semCube.set("float,float,greaterthanEqual", "bool");
        
        // char/letrero equal comparisons
        semCube.set("char,char,isEqual", "bool");
        semCube.set("char,char,isDifferent", "bool");
        semCube.set("char,letrero,isEqual", "bool");
        semCube.set("char,letrero,isDifferent", "bool");
        semCube.set("letrero,letrero,isEqual", "bool");
        semCube.set("letrero,letrero,isDifferent", "bool");
        semCube.set("letrero,char,isEqual", "bool");
        semCube.set("letrero,char,isDifferent", "bool");

        // assignment
        semCube.set("int,int,equals", "int");
        semCube.set("float,float,equals", "float");
        semCube.set("char,char,equals", "char");
        semCube.set("letrero,letrero,equals", "letrero");
        semCube.set("float,int,equals", "float");

        startingDirCodes.set("global,int", GLOBAL_INT);
        startingDirCodes.set("global,float", GLOBAL_FLOAT);
        startingDirCodes.set("global,char", GLOBAL_CHAR);
        startingDirCodes.set("local,int", LOCAL_INT);
        startingDirCodes.set("local,float", LOCAL_FLOAT);
        startingDirCodes.set("local,char", LOCAL_CHAR);
        startingDirCodes.set("temp,int", TEMP_INT);
        startingDirCodes.set("temp,float", TEMP_FLOAT);
        startingDirCodes.set("temp,char", TEMP_CHAR);
        startingDirCodes.set("temp,bool", TEMP_BOOL);
        startingDirCodes.set("const,int", CONST_INT);
        startingDirCodes.set("const,float", CONST_FLOAT);
        startingDirCodes.set("const,char", CONST_CHAR);
        startingDirCodes.set("const,letrero", CONST_LETRERO);
    }

    fillMaps();

    // returns the resulting type of an operation
    function semanticCube(operand1, operand2, operator) {
        var typeOperand1 = getTypeFromDir(operand1);
        var typeOperand2 = getTypeFromDir(operand2);
        //console.log(typeOperand1 + "," + typeOperand2 + "," + operator);
        var result = semCube.get(typeOperand1 + "," + typeOperand2 + "," + operator);
        return result;
    }

    // adds a function to the function directory
    function createFunction(id, funcType) {
        if (!functionDirectory.has(id)) {
            currentFunctionId = id;
            functionDirectory.set(id, {type: funcType, varTable: new Map(), params: [], quadCounter: 0, 
            initialCounters: counters, tempVarsUsed: 0, foundReturnStatement: false});
        }
        else {
            // error, re-declaration of function
            flagError(ERROR_FUNC_REDECLARATION);
        }
    }

    // adds a variable to the variable table of a function in the directory
    // and returns the dir of the created variable
    function createVariable(id) {
        var varTable = functionDirectory.get(currentFunctionId).varTable;
        if (!varTable.has(id)) {
            var scope = scopeIsGlobal() ? "global" : "local";
            var generatedDir = generateDir(startingDirCodes.get(scope + "," + currentType));

            varTable.set(id, {type: currentType, dir: generatedDir});
            return generatedDir;
        }
        else {
            // error, re-declaration of variable
            flagError(ERROR_VAR_REDECLATION);
        }
    }

    function variableExists(name) {
        var varTable = functionDirectory.get(currentFunctionId).varTable;
        var exists = varTable.has(name);
        if (!exists && !scopeIsGlobal()) {
            varTable = functionDirectory.get(programName).varTable;
            exists = varTable.has(name);
        }
        if (exists) {
            return true;
        }
        else {
            // error, no variable with that id
            flagError(ERROR_UNKNOWN_VARIABLE);
        }
    }

    // returns a variable, given its id and function id
    function getVariable(id, funcId) {
        var varTable = functionDirectory.get(funcId).varTable;
        if (varTable.has(id)) {
            return varTable.get(id);
        }
        else if (!scopeIsGlobal()) {
            varTable = functionDirectory.get(programName).varTable;
            if (varTable.has(id)) {
                return varTable.get(id);
            }
        }
        else {
            // error, no variable with that id
            flagError(ERROR_UNKNOWN_VARIABLE);
        }
    }
    
    // adds a constant to the constTable and returns its dir
    function addConstant(val, startingDir) {
        if (!constTable.has(val)) {
            constTable.set(val, generateDir(startingDir));
        }
        return constTable.get(val);
    }

    function printStacks(){
        console.log("stacks:");
        console.log(stackOperands);
        console.log(stackOperators);
    }

    function fillQuad(quadToFill) {
        quads[quadToFill].dir2 = quadCount;
    }

    function addQuad() {
        //printStacks();

        // pops
        var dirRight = stackOperands.pop();
        var dirLeft = stackOperands.pop();
        var operator = stackOperators.pop();
        
        // use semantic cube to generate the direction for the temporary var
        var resultType = semanticCube(dirLeft, dirRight, operator);
        //console.log("result type:" + resultType);

        // TODO: if no value exists in semCube for the given key, error
        if (resultType == undefined) {
            // error TYPE_MISMATCH
            flagError(ERROR_TYPE_MISMATCH);
        }

        var dirTemp = generateDir(startingDirCodes.get("temp," + resultType));

        // push new quad
        pushQuad(operator, dirLeft, dirRight, dirTemp);

        // add dir of temporary var to operand stack
        pushOperand(dirTemp);
        return dirTemp;
    }

    function pushQuad(operator, dir1, dir2, dir3) {
        quads.push({operator: operator, dir1: dir1, dir2: dir2, dir3: dir3});
        quadCount++;
    }

    function pushOperator(operator){
        stackOperators.push(operator);
    }

    function pushOperand(operand){
        stackOperands.push(operand);
    }

    function generateDir(startingDir) {
        // make copy of counter of direction type, and then add to counter
        var dirCounter = startingDir + counters[startingDir / 10000];
        counters[startingDir / 10000]++;
        // return counter copy
        return dirCounter;
    }

    function getTypeFromDir(dir) {
        //depending on range get type
        if ((dir >= GLOBAL_INT && dir < GLOBAL_FLOAT) || (dir >= LOCAL_INT && dir < LOCAL_FLOAT) 
            || (dir >= TEMP_INT && dir < TEMP_FLOAT) || (dir >= CONST_INT && dir < CONST_FLOAT)) {
                return "int";
        }
        if ((dir >= GLOBAL_FLOAT && dir < GLOBAL_CHAR) || (dir >= LOCAL_FLOAT && dir < LOCAL_CHAR) 
            || (dir >= TEMP_FLOAT && dir < TEMP_CHAR) || (dir >= CONST_FLOAT && dir < CONST_CHAR)) {
                return "float";
        }
        if ((dir >= GLOBAL_CHAR && dir < LOCAL_INT) || (dir >= LOCAL_CHAR && dir < TEMP_INT) 
            || (dir >= TEMP_CHAR && dir < TEMP_BOOL) || (dir >= CONST_CHAR && dir < CONST_LETRERO)) {
                return "char";
        }
        if (dir >= TEMP_BOOL && dir < CONST_INT){
                return "bool";
        }
        if (dir >= CONST_LETRERO) {
            return "letrero";
        }
    }

    function scopeIsGlobal() {
        return currentFunctionId == programName;
    }

    function top(stack) {
        return stack[stack.length - 1];
    }

    function printMap(map) {
        console.log("{");
        for (let key of map.keys()) {
            var value = map.get(key);
            console.log(key + ": " + JSON.stringify(map.get(key)) + ",");
            if (map.get(key).varTable) {
                console.log("VarTable of " + key + ":");
                var varTable = map.get(key).varTable;
                printMap(varTable);
            }
        }
        console.log("}");
    }

    // reset variables
    function resetVariables(){
        functionDirectory.clear();
        constTable.clear();
        stackOperands = [];
        stackOperands = [];
        stackJumps = [];
        quads = [];
        quadCount = 0;
        programName = "";
        currentFunctionId = "";
        currentType = "";
        counters = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        forVars = [];
        calledFuncs = [];
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 20
break;
case 2:return 26
break;
case 3:return 27
break;
case 4:return 28
break;
case 5:return 47
break;
case 6:return 11
break;
case 7:return 17
break;
case 8:return 41
break;
case 9:return 106
break;
case 10:return 108
break;
case 11:return 111
break;
case 12:return 97
break;
case 13:return 101
break;
case 14:return 98
break;
case 15:return 114
break;
case 16:return 115
break;
case 17:return 118
break;
case 18:return 113
break;
case 19:return 73
break;
case 20:return 96
break;
case 21:return 'colon'
break;
case 22:return 7
break;
case 23:return 25
break;
case 24:return 50
break;
case 25:return 52
break;
case 26:return 29
break;
case 27:return 31
break;
case 28:return 18
break;
case 29:return 19
break;
case 30:return 79
break;
case 31:return 79
break;
case 32:return 80
break;
case 33:return 85
break;
case 34:return 86
break;
case 35:return 74
break;
case 36:return 75
break;
case 37:return 70
break;
case 38:return 71
break;
case 39:return 72
break;
case 40:return 'inverse'
break;
case 41:return 65
break;
case 42:return 66
break;
case 43:return 12
break;
case 44:return 30
break;
case 45:return 93
break;
case 46:return 94
break;
case 47:return 105
break;
case 48:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:void\b)/,/^(?:program\b)/,/^(?:main\b)/,/^(?:module\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:write\b)/,/^(?:read\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:to\b)/,/^(?:do\b)/,/^(?:==)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/,/^(?:\d+)/,/^(?:\d+\.\d+)/,/^(?:'.')/,/^(?:".*")/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = progriscript_jison;
exports.Parser = progriscript_jison.Parser;
exports.parse = function () { return progriscript_jison.parse.apply(progriscript_jison, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}